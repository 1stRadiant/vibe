{
  "id": "whole-page",
  "type": "container",
  "description": "A comprehensive route planning and delivery management application with a map interface, stop management, and an AI assistant.",
  "children": [
    {
      "id": "head-content",
      "type": "head",
      "description": "Metadata for the page, including character set, viewport settings, title, and a link to the Leaflet mapping library stylesheet.",
      "code": "<meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>paRoad</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" />"
    },
    {
      "id": "page-styles",
      "type": "css",
      "description": "Comprehensive styles for the application layout, header, side menu, map, input forms, modals, AI chat interface, and other UI components.",
      "code": "body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            display: grid;\n            grid-template-areas:\n                \"header\"\n                \"sidebar\";\n            grid-template-rows: auto 1fr;\n            min-height: 100vh;\n        }\n\n        header {\n            grid-area: header;\n            background-color: #f0f0f0;\n            padding: 10px 20px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            border-bottom: 1px solid #ddd;\n            position: sticky;\n            top: 0;\n            z-index: 1000;\n        }\n\n        .header-left {\n            display: flex;\n            align-items: center;\n            gap: 15px;\n        }\n\n        .hamburger-menu-btn {\n            display: flex;\n            flex-direction: column;\n            justify-content: space-around;\n            width: 30px;\n            height: 24px;\n            background: transparent;\n            border: none;\n            cursor: pointer;\n            padding: 0;\n            z-index: 10;\n        }\n\n        .hamburger-menu-btn span {\n            width: 30px;\n            height: 3px;\n            background-color: #333;\n            border-radius: 3px;\n            transition: all 0.3s linear;\n        }\n\n        .side-menu {\n            height: 100%;\n            width: 250px;\n            position: fixed;\n            z-index: 1050;\n            top: 0;\n            left: 0;\n            background-color: #fff;\n            overflow-x: hidden;\n            transition: 0.3s;\n            padding-top: 60px;\n            box-shadow: 2px 0 5px rgba(0,0,0,0.1);\n            transform: translateX(-100%);\n        }\n        \n        .side-menu.visible {\n            transform: translateX(0);\n        }\n\n        .menu-item {\n            padding: 12px 15px;\n            text-decoration: none;\n            font-size: 1.1em;\n            color: #333;\n            display: block;\n            transition: 0.2s;\n            border-bottom: 1px solid #f0f0f0;\n        }\n        \n        .menu-item:hover {\n            background-color: #f9f9f9;\n        }\n\n        .menu-item.active {\n            background-color: #e7f3fe;\n            color: #1a73e8;\n            font-weight: bold;\n        }\n\n        .api-key-container {\n            display: flex;\n            align-items: stretch;\n            gap: 10px;\n        }\n\n        .api-key-container input {\n            flex-grow: 1;\n            margin-bottom: 0;\n        }\n        .api-key-container button {\n            width: auto;\n            margin-bottom: 0;\n            flex-shrink: 0;\n        }\n\n        .api-key-status {\n            padding: 5px 10px;\n            border-radius: 4px;\n            font-size: 0.9em;\n        }\n\n        .not-set {\n            background-color: #ffcccc;\n            color: #990000;\n        }\n\n        .saved {\n            background-color: #ccffcc;\n            color: #009900;\n        }\n\n        #map {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            height: 100vh;\n            background-color: #e0e0e0;\n            z-index: 900;\n            display: none;\n        }\n\n        #map.visible {\n            display: block;\n        }\n\n        aside {\n            grid-area: sidebar;\n            background-color: #f8f8f8;\n            overflow-y: auto;\n            border-top: 1px solid #ddd;\n            min-height: calc(100vh - 60px);\n            display: flex;\n            flex-direction: column;\n        }\n\n        @media (min-width: 768px) {\n            body {\n                grid-template-areas:\n                    \"header header\"\n                    \"sidebar sidebar\";\n                grid-template-columns: 300px 1fr;\n                grid-template-rows: auto 1fr;\n            }\n\n            aside {\n                min-height: auto;\n                height: calc(100vh - 60px);\n                border-top: none;\n                border-right: 1px solid #ddd;\n                max-height: none;\n            }\n        }\n\n        .input-group {\n            margin-bottom: 15px;\n            position: relative;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        input, select, button, textarea {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n            font-size: 1em;\n        }\n\n        input[type=\"text\"] {\n            padding-right: 25px;\n        }\n\n        button {\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n\n        button:hover:not(:disabled) {\n            background-color: #45a049;\n        }\n\n        button:disabled {\n            background-color: #cccccc;\n            cursor: not-allowed;\n            color: #666666;\n        }\n\n        .clear-btn {\n            background-color: #f44336;\n        }\n\n        .clear-btn:hover:not(:disabled) {\n            background-color: #d32f2f;\n        }\n\n        .map-toggle-btn {\n            background-color: #2196F3;\n            padding: 5px 10px;\n            font-size: 0.9em;\n            margin-left: 10px;\n        }\n\n        .map-toggle-btn:hover {\n            background-color: #0b7dda;\n        }\n\n        .map-toggle-btn.visible {\n            background-color: #ff9800;\n        }\n\n        .map-toggle-btn.visible:hover {\n            background-color: #e68a00;\n        }\n\n        .suggestions {\n            position: absolute;\n            background: white;\n            border: 1px solid #ddd;\n            border-top: none;\n            width: calc(100% - 2px);\n            max-height: 200px;\n            overflow-y: auto;\n            z-index: 1000;\n            display: none;\n            box-sizing: border-box;\n            top: 100%;\n            left: 0;\n            margin-top: -11px;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        }\n\n        .suggestion-item {\n            padding: 8px;\n            cursor: pointer;\n            font-size: 0.9em;\n            border-bottom: 1px solid #eee;\n        }\n\n        .suggestion-item:last-child {\n            border-bottom: none;\n        }\n\n        .suggestion-item:hover {\n            background-color: #f0f0f0;\n        }\n\n        .suggestion-item.no-results {\n            font-style: italic;\n            color: #888;\n            cursor: default;\n        }\n\n        .suggestion-item.no-results:hover {\n            background-color: transparent;\n        }\n\n        .delivery-stops {\n            margin-top: 20px;\n            flex-grow: 1;\n            display: flex;\n            flex-direction: column;\n            min-height: 100px;\n        }\n\n        .delivery-stops h3 {\n            margin-bottom: 5px;\n        }\n\n        .stop-list-container {\n            border: 1px solid #ddd;\n            background-color: #fff;\n            border-radius: 4px;\n            padding: 5px;\n            overflow-y: auto;\n            flex-grow: 1;\n            min-height: 50px;\n        }\n\n        .stop-list {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .stop-list:empty::before {\n            content: \"No stops added yet.\";\n            display: block;\n            text-align: center;\n            padding: 10px;\n            color: #888;\n            font-style: italic;\n            font-size: 0.9em;\n        }\n\n        .stop-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 8px;\n            background-color: #fff;\n            border-bottom: 1px solid #eee;\n            margin-bottom: 0;\n            border-radius: 0;\n            font-size: 0.9em;\n        }\n\n        .stop-item:last-child {\n            border-bottom: none;\n        }\n\n        .stop-item.completed {\n            background-color: #f0fff0;\n        }\n\n        .stop-item.completed span {\n            text-decoration: line-through;\n            color: #888;\n        }\n\n        .stop-item.current-stop {\n            background-color: #e3f2fd;\n            border-left: 4px solid #2196F3;\n        }\n\n        .stop-item span {\n            flex-grow: 1;\n            margin-right: 8px;\n            word-break: break-word;\n        }\n\n        .stop-item button {\n            width: auto;\n            padding: 2px 5px;\n            font-size: 0.8em;\n            line-height: 1;\n            background-color: #f44336;\n            flex-shrink: 0;\n            margin-bottom: 0;\n        }\n\n        .stop-item .complete-btn {\n            background-color: #4CAF50;\n            margin-right: 5px;\n        }\n\n        .stop-item .note-btn {\n            background-color: #2196F3;\n            margin-right: 5px;\n        }\n\n        .route-options {\n            margin-top: 15px;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n        }\n\n        .route-option {\n            display: flex;\n            align-items: center;\n        }\n\n        .route-option input {\n            width: auto;\n            margin-right: 8px;\n            margin-bottom: 0;\n        }\n\n        .route-constraints {\n            margin-top: 15px;\n            padding-top: 15px;\n            border-top: 1px dashed #ccc;\n        }\n\n        .route-constraints h3 {\n            margin-bottom: 10px;\n        }\n\n        .route-summary {\n            margin-top: 20px;\n            padding: 15px;\n            background-color: #e7f3fe;\n            border-left: 5px solid #2196F3;\n            display: none;\n            border-radius: 4px;\n        }\n\n        .route-summary h3 {\n            margin-top: 0;\n            margin-bottom: 10px;\n            color: #1a73e8;\n        }\n\n        .route-summary p {\n            margin-bottom: 10px;\n            font-size: 0.95em;\n        }\n\n        .route-summary ol {\n            padding-left: 0;\n            margin: 0;\n            font-size: 0.9em;\n            list-style: none;\n        }\n\n        .route-summary li {\n            margin-bottom: 8px;\n            padding: 5px 0;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            border-bottom: 1px dashed #cce7ff;\n        }\n\n        .route-summary li.completed {\n            background-color: #f0fff0;\n        }\n\n        .route-summary li.completed > span {\n            text-decoration: line-through;\n            color: #888;\n        }\n\n        .route-summary li.current-stop {\n            background-color: #d1eaff;\n            border-left: 4px solid #1a73e8;\n            padding-left: 5px;\n        }\n\n        .route-summary li:last-child {\n            border-bottom: none;\n        }\n\n        .route-summary li > span {\n            flex-grow: 1;\n            margin-right: 10px;\n            word-break: break-word;\n        }\n\n        /* Tab styles */\n        .tab-nav {\n            display: none; /* Replaced by hamburger menu */\n        }\n\n        .tab-button {\n            padding: 8px 12px;\n            cursor: pointer;\n            border: none;\n            background-color: transparent;\n            font-size: 0.9em;\n            color: #555;\n            border-top: 3px solid transparent;\n            transition: all 0.2s ease-in-out;\n            position: relative;\n            flex-shrink: 0; /* Prevent buttons from shrinking */\n            white-space: nowrap; /* Keep button text on one line */\n        }\n\n        #toggle-map {\n            background-color: #2196F3;\n            color: white;\n            border-top-color: #2196F3;\n        }\n\n        #toggle-map:hover {\n            background-color: #0b7dda;\n        }\n\n        #toggle-map.visible {\n            background-color: #ff9800;\n        }\n\n        #toggle-map.visible:hover {\n            background-color: #e68a00;\n        }\n\n        .tab-button.active {\n            color: #4CAF50;\n            border-top-color: #4CAF50;\n        }\n\n        .tab-button .tab-notification-badge {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background-color: #f44336;\n            color: white;\n            border-radius: 50%;\n            width: 10px;\n            height: 10px;\n            display: none;\n        }\n\n        .tab-button.has-notification .tab-notification-badge {\n            display: block;\n        }\n\n        .tab-button:hover:not(.active) {\n            background-color: #efefef;\n        }\n\n        .tab-content {\n            flex-grow: 1;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .tab-pane {\n            display: none;\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            padding: 20px;\n            overflow-y: auto;\n            flex-direction: column;\n            gap: 15px;\n        }\n\n        .tab-pane.active {\n            display: flex;\n        }\n        \n        .tab-pane .input-group,\n        .tab-pane .postcode-search,\n        .tab-pane .route-options,\n        .tab-pane .action-buttons {\n            margin-bottom: 0;\n        }\n\n        .navigate-btn {\n            width: auto;\n            padding: 3px 8px;\n            font-size: 0.8em;\n            line-height: 1;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 3px;\n            cursor: pointer;\n            flex-shrink: 0;\n            margin-left: 5px;\n            margin-bottom: 0;\n            vertical-align: middle;\n        }\n\n        .navigate-btn:hover {\n            background-color: #0056b3;\n        }\n\n        .complete-btn {\n            width: auto;\n            padding: 3px 8px;\n            font-size: 0.8em;\n            line-height: 1;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 3px;\n            cursor: pointer;\n            flex-shrink: 0;\n            margin-left: 5px;\n            margin-bottom: 0;\n            vertical-align: middle;\n        }\n\n        .complete-btn:hover {\n            background-color: #3e8e41;\n        }\n\n        .note-btn {\n            width: auto;\n            padding: 3px 8px;\n            font-size: 0.8em;\n            line-height: 1;\n            background-color: #ff9800;\n            color: white;\n            border: none;\n            border-radius: 3px;\n            cursor: pointer;\n            flex-shrink: 0;\n            margin-left: 5px;\n            margin-bottom: 0;\n            vertical-align: middle;\n        }\n\n        .note-btn:hover {\n            background-color: #e68a00;\n        }\n\n        .postcode-search {\n            margin-top: 20px;\n            padding-top: 15px;\n            border-top: 1px dashed #ccc;\n        }\n\n        .postcode-search h3 {\n            margin-bottom: 10px;\n        }\n\n        .address-results {\n            max-height: 300px;\n            overflow-y: auto;\n            border: 1px solid #ddd;\n            margin-top: 10px;\n            padding: 0;\n            background: white;\n            display: none;\n            border-radius: 4px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n        }\n\n        .address-results:empty::before {\n            content: \"No addresses found.\";\n            display: block;\n            text-align: center;\n            padding: 10px;\n            color: #888;\n            font-style: italic;\n            font-size: 0.9em;\n        }\n\n        .address-result-item {\n            padding: 8px 10px;\n            border-bottom: 1px solid #eee;\n            cursor: pointer;\n            font-size: 0.9em;\n        }\n\n        .address-result-item:hover {\n            background-color: #f5f5f5;\n        }\n\n        .address-result-item:last-child {\n            border-bottom: none;\n        }\n\n        .action-buttons {\n            margin-top: 20px;\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 10px;\n        }\n\n        .close-map-btn {\n            display: none; /* Remove close button as requested */\n        }\n\n        #map.visible + .close-map-btn {\n            display: none;\n        }\n\n        .location-status {\n            font-size: 0.8em;\n            color: #666;\n            margin-top: -8px;\n            margin-bottom: 10px;\n        }\n\n        .location-loading {\n            color: #2196F3;\n        }\n\n        .location-success {\n            color: #4CAF50;\n        }\n\n        .location-error {\n            color: #f44336;\n        }\n\n        .location-permission-btn {\n            background-color: #2196F3;\n            padding: 5px 10px;\n            font-size: 0.9em;\n            margin-top: 5px;\n            width: auto;\n            display: inline-block;\n        }\n\n        .location-permission-btn:hover {\n            background-color: #0b7dda;\n        }\n\n        .note-modal {\n            display: none;\n            position: fixed;\n            z-index: 1100;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0,0,0,0.4);\n        }\n\n        .note-modal-content {\n            background-color: #fefefe;\n            margin: 15% auto;\n            padding: 20px;\n            border: 1px solid #888;\n            width: 80%;\n            max-width: 500px;\n            border-radius: 5px;\n        }\n\n        .note-modal-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 15px;\n        }\n\n        .note-modal-header h3 {\n            margin: 0;\n        }\n\n        .note-modal-close {\n            color: #aaa;\n            font-size: 28px;\n            font-weight: bold;\n            cursor: pointer;\n        }\n\n        .note-modal-close:hover {\n            color: black;\n        }\n\n        .note-modal-footer {\n            display: flex;\n            justify-content: flex-end;\n            gap: 10px;\n            margin-top: 15px;\n        }\n\n        .note-textarea {\n            min-height: 100px;\n            resize: vertical;\n        }\n\n        /* AI Chat Assistant Styles */\n        .ai-chat-container {\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            width: 350px;\n            max-height: 500px;\n            background-color: white;\n            border-radius: 15px;\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n            z-index: 1000;\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n            transform: translateY(100%);\n            opacity: 0;\n            transition: transform 0.3s ease, opacity 0.3s ease;\n        }\n\n        .ai-chat-container.visible {\n            transform: translateY(0);\n            opacity: 1;\n        }\n\n        .ai-chat-header {\n            background-color: #6a1b9a;\n            color: white;\n            padding: 15px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            cursor: pointer;\n        }\n\n        .ai-chat-header h3 {\n            margin: 0;\n            font-size: 1.1em;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n\n        .ai-chat-icon {\n            font-size: 1.2em;\n        }\n\n        .ai-chat-close {\n            background: none;\n            border: none;\n            color: white;\n            font-size: 1.2em;\n            cursor: pointer;\n        }\n\n        .ai-chat-body {\n            flex-grow: 1;\n            padding: 15px;\n            overflow-y: auto;\n            background-color: #f9f9f9;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n        }\n\n        .ai-message {\n            max-width: 80%;\n            padding: 10px 15px;\n            border-radius: 18px;\n            font-size: 0.9em;\n            line-height: 1.4;\n        }\n\n        .ai-message.assistant {\n            align-self: flex-start;\n            background-color: white;\n            border-bottom-left-radius: 5px;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n\n        .ai-message.user {\n            align-self: flex-end;\n            background-color: #6a1b9a;\n            color: white;\n            border-bottom-right-radius: 5px;\n        }\n\n        .ai-chat-input-container {\n            padding: 10px;\n            background-color: white;\n            border-top: 1px solid #eee;\n            display: flex;\n            gap: 8px;\n        }\n\n        .ai-chat-input {\n            flex-grow: 1;\n            padding: 8px 12px;\n            border: 1px solid #ddd;\n            border-radius: 20px;\n            font-size: 0.9em;\n            outline: none;\n        }\n\n        .ai-chat-input:focus {\n            border-color: #6a1b9a;\n        }\n\n        .ai-chat-send {\n            background-color: #6a1b9a;\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 36px;\n            height: 36px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n        }\n\n        .ai-chat-send:hover {\n            background-color: #5e1688;\n        }\n\n        .ai-chat-quick-actions {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 8px;\n            margin-top: 10px;\n        }\n\n        .ai-chat-quick-action {\n            background-color: #f0e6f6;\n            color: #6a1b9a;\n            border: none;\n            border-radius: 15px;\n            padding: 5px 10px;\n            font-size: 0.8em;\n            cursor: pointer;\n            white-space: nowrap;\n        }\n\n        .ai-chat-quick-action:hover {\n            background-color: #e2d1ed;\n        }\n\n        .ai-chat-toggle {\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            width: 60px;\n            height: 60px;\n            background-color: #6a1b9a;\n            color: white;\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n            box-shadow: 0 3px 10px rgba(0,0,0,0.2);\n            z-index: 1000;\n            border: none;\n        }\n\n        .ai-chat-toggle-icon {\n            font-size: 1.5em;\n        }\n\n        .ai-chat-toggle-badge {\n            position: absolute;\n            top: -5px;\n            right: -5px;\n            background-color: #f44336;\n            color: white;\n            border-radius: 50%;\n            width: 20px;\n            height: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 0.7em;\n        }\n\n        /* Scanner input styles */\n        .scanner-input {\n            margin-top: 10px;\n            display: flex;\n            gap: 10px;\n        }\n\n        .scanner-input input {\n            margin-bottom: 0;\n        }\n\n        .scanner-input button {\n            width: auto;\n            min-width: 100px;\n        }\n\n        /* AI Settings Modal */\n        .ai-settings-modal {\n            display: none;\n            position: fixed;\n            z-index: 1100;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0,0,0,0.4);\n        }\n\n        .ai-settings-content {\n            background-color: #fefefe;\n            margin: 15% auto;\n            padding: 20px;\n            border: 1px solid #888;\n            width: 80%;\n            max-width: 500px;\n            border-radius: 5px;\n            display: flex;\n            flex-direction: column;\n            gap: 15px;\n        }\n\n        .ai-settings-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .ai-settings-header h3 {\n            margin: 0;\n        }\n\n        .ai-settings-close {\n            color: #aaa;\n            font-size: 28px;\n            font-weight: bold;\n            cursor: pointer;\n        }\n\n        .ai-settings-close:hover {\n            color: black;\n        }\n\n        .ai-settings-footer {\n            display: flex;\n            justify-content: flex-end;\n            gap: 10px;\n            margin-top: 15px;\n        }\n\n        .ai-training-data {\n            width: 100%;\n            height: 100px;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            margin-bottom: 10px;\n            resize: vertical;\n        }\n\n        .postcode-buttons {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 10px;\n        }\n\n        /* Scanner Modal styles */\n        .scanner-modal {\n            display: none;\n            position: fixed;\n            z-index: 1200; /* Above other modals */\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0,0,0,0.5);\n            align-items: center;\n            justify-content: center;\n        }\n\n        .scanner-modal-content {\n            background-color: #fefefe;\n            padding: 20px;\n            border: 1px solid #888;\n            width: 90%;\n            max-width: 600px;\n            border-radius: 5px;\n            position: relative;\n        }\n\n        .scanner-modal-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 15px;\n        }\n\n        .scanner-modal-header h3 {\n            margin: 0;\n        }\n\n        .scanner-modal-close {\n            color: #aaa;\n            font-size: 28px;\n            font-weight: bold;\n            cursor: pointer;\n        }\n\n        .scanner-modal-close:hover {\n            color: black;\n        }\n\n        .scanner-body {\n            position: relative;\n            background: #333;\n            overflow: hidden;\n            border-radius: 4px;\n            width: 100%;\n            aspect-ratio: 16 / 9;\n        }\n\n        #scanner-video {\n            width: 100%;\n            height: 100%;\n            display: block;\n            object-fit: cover;\n        }\n\n        #scanner-canvas {\n            display: none;\n        }\n\n        #scanner-overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .scanner-box {\n            width: 80%;\n            height: 30%;\n            border: 2px solid rgba(255, 255, 255, 0.8);\n            box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.5);\n            border-radius: 5px;\n        }\n\n        .scanner-instructions {\n            color: white;\n            background: rgba(0,0,0,0.7);\n            padding: 5px 10px;\n            border-radius: 5px;\n            margin-top: 15px;\n        }\n\n        #scanner-result-container {\n            margin-top: 15px;\n            padding: 10px;\n            background-color: #e7f3fe;\n            border-radius: 4px;\n            text-align: center;\n        }\n\n        #scanner-result-container button {\n            margin: 5px;\n        }\n\n        .scanner-modal-footer {\n            margin-top: 15px;\n            text-align: center;\n            color: #666;\n            font-size: 0.9em;\n        }"
    },
    {
      "id": "app-header",
      "type": "html",
      "description": "The main header of the application, containing the menu button and the application title.",
      "code": "<header></header>",
      "selector": "#whole-page",
      "position": "beforeend",
      "children": [
        {
          "id": "header-left-container",
          "type": "html",
          "description": "A container for the left side of the header, including the hamburger menu and the title.",
          "code": "<div class=\"header-left\"></div>",
          "selector": "#app-header",
          "position": "beforeend",
          "children": [
            {
              "id": "hamburger-menu-button",
              "type": "html",
              "description": "A button to toggle the visibility of the side navigation menu.",
              "code": "<button id=\"hamburger-menu-btn\" class=\"hamburger-menu-btn\">\n                <span></span>\n                <span></span>\n                <span></span>\n            </button>",
              "selector": "#header-left-container",
              "position": "beforeend"
            },
            {
              "id": "app-title",
              "type": "html",
              "description": "The main title of the application, 'paRoad'.",
              "code": "<h1>paRoad</h1>",
              "selector": "#hamburger-menu-button",
              "position": "afterend"
            }
          ]
        }
      ]
    },
    {
      "id": "side-menu-container",
      "type": "html",
      "description": "The collapsible side navigation menu containing links to different sections of the application.",
      "code": "<div id=\"side-menu\" class=\"side-menu\"></div>",
      "selector": "#app-header",
      "position": "afterend",
      "children": [
        {
          "id": "menu-item-plan-route",
          "type": "html",
          "description": "A navigation link to the 'Plan Route' tab.",
          "code": "<a href=\"#\" class=\"menu-item active\" data-tab=\"plan-tab\">Plan Route</a>",
          "selector": "#side-menu-container",
          "position": "beforeend"
        },
        {
          "id": "menu-item-stops-list",
          "type": "html",
          "description": "A navigation link to the 'Stops List' tab.",
          "code": "<a href=\"#\" class=\"menu-item\" data-tab=\"stops-tab\">Stops List</a>",
          "selector": "#menu-item-plan-route",
          "position": "afterend"
        },
        {
          "id": "menu-item-live-route",
          "type": "html",
          "description": "A navigation link to the 'Live Route' tab.",
          "code": "<a href=\"#\" class=\"menu-item\" data-tab=\"route-tab\">Live Route</a>",
          "selector": "#menu-item-stops-list",
          "position": "afterend"
        },
        {
          "id": "menu-item-ai-assistant",
          "type": "html",
          "description": "A navigation link to the 'AI Assistant' tab.",
          "code": "<a href=\"#\" class=\"menu-item\" data-tab=\"ai-tab\">AI Assistant</a>",
          "selector": "#menu-item-live-route",
          "position": "afterend"
        },
        {
          "id": "menu-item-options",
          "type": "html",
          "description": "A navigation link to the 'Options' tab.",
          "code": "<a href=\"#\" class=\"menu-item\" data-tab=\"options-tab\">Options</a>",
          "selector": "#menu-item-ai-assistant",
          "position": "afterend"
        },
        {
          "id": "menu-item-toggle-map",
          "type": "html",
          "description": "A navigation link that toggles the visibility of the map.",
          "code": "<a href=\"#\" id=\"toggle-map-menu-item\" class=\"menu-item\">Show Map</a>",
          "selector": "#menu-item-options",
          "position": "afterend"
        }
      ]
    },
    {
      "id": "main-content-sidebar",
      "type": "html",
      "description": "The main content area which houses the tabbed interface for all application functionality.",
      "code": "<aside></aside>",
      "selector": "#side-menu-container",
      "position": "afterend",
      "children": [
        {
          "id": "hidden-tab-navigation",
          "type": "html",
          "description": "A hidden container for tab buttons, functionally replaced by the side menu.",
          "code": "<div class=\"tab-nav\">\n            <button class=\"tab-button active\" data-tab=\"plan-tab\">Plan Route</button>\n            <button class=\"tab-button\" data-tab=\"stops-tab\">Stops List</button>\n            <button class=\"tab-button\" data-tab=\"route-tab\">Live Route</button>\n            <button class=\"tab-button\" data-tab=\"ai-tab\">AI Assistant</button>\n            <button class=\"tab-button\" data-tab=\"options-tab\">Options</button>\n            <button class=\"tab-button\" id=\"toggle-map\">Show Map</button>\n        </div>",
          "selector": "#main-content-sidebar",
          "position": "beforeend"
        },
        {
          "id": "tab-content-container",
          "type": "html",
          "description": "A container that holds all the individual tab panes for the application.",
          "code": "<div class=\"tab-content\"></div>",
          "selector": "#hidden-tab-navigation",
          "position": "afterend",
          "children": [
            {
              "id": "plan-route-tab",
              "type": "html",
              "description": "The tab pane for planning a new route, including inputs for start location, delivery stops, and route options.",
              "code": "<div id=\"plan-tab\" class=\"tab-pane active\"></div>",
              "selector": "#tab-content-container",
              "position": "beforeend",
              "children": [
                {
                  "id": "start-location-group",
                  "type": "html",
                  "description": "The input group for defining the starting location of the route.",
                  "code": "<div class=\"input-group\">\n                    <label for=\"start-location\">Start Location (will be updated on calculation)</label>\n                    <input type=\"text\" id=\"start-location\" placeholder=\"Type address or postcode...\" autocomplete=\"off\" />\n                    <div id=\"start-suggestions\" class=\"suggestions\" style=\"display: none;\"></div>\n                    <div id=\"location-status\" class=\"location-status\">Requesting location permission...</div>\n                    <button id=\"request-location\" class=\"location-permission-btn\" style=\"display: none;\">Allow Location Access</button>\n                </div>",
                  "selector": "#plan-route-tab",
                  "position": "beforeend"
                },
                {
                  "id": "add-stop-group",
                  "type": "html",
                  "description": "The input group for searching and adding new delivery stops to the route.",
                  "code": "<div class=\"input-group\">\n                    <label for=\"delivery-location\">Add Delivery Stop</label>\n                    <input type=\"text\" id=\"delivery-location\" placeholder=\"Type address or postcode...\" autocomplete=\"off\" />\n                    <div id=\"delivery-suggestions\" class=\"suggestions\" style=\"display: none;\"></div>\n                    <label for=\"stop-notes\">Notes (optional)</label>\n                    <textarea id=\"stop-notes\" placeholder=\"Add notes about this stop...\"></textarea>\n                    <button id=\"add-stop\" disabled=\"\">Add Stop</button>\n                </div>",
                  "selector": "#start-location-group",
                  "position": "afterend"
                },
                {
                  "id": "postcode-search-group",
                  "type": "html",
                  "description": "A section for finding addresses by entering a full UK postcode.",
                  "code": "<div class=\"postcode-search\">\n                    <h3>Postcode Address Search</h3>\n                    <div class=\"input-group\">\n                        <label for=\"postcode-search\">Enter Full Postcode</label>\n                        <input type=\"text\" id=\"postcode-search\" placeholder=\"e.g. SO16 0AS\" />\n                        <div class=\"postcode-buttons\">\n                            <button id=\"search-postcode\">Find Addresses</button>\n                            <button id=\"scan-postcode-btn\">Scan Postcode</button>\n                        </div>\n                    </div>\n                    <div id=\"address-results\" class=\"address-results\" style=\"display: none;\"></div>\n                </div>",
                  "selector": "#add-stop-group",
                  "position": "afterend"
                },
                {
                  "id": "route-optimization-options",
                  "type": "html",
                  "description": "A set of radio buttons for selecting the desired route optimization method.",
                  "code": "<div class=\"route-options\">\n                    <h3>Route Optimization</h3>\n                    <div class=\"route-option\">\n                        <input type=\"radio\" id=\"optimize-distance\" name=\"route-optimization\" value=\"closest-to-start\" />\n                        <label for=\"optimize-distance\">Closest to Start</label>\n                    </div>\n                    <div class=\"route-option\">\n                        <input type=\"radio\" id=\"optimize-time\" name=\"route-optimization\" value=\"time\" checked=\"\" />\n                        <label for=\"optimize-time\">Fastest Path (TSP)</label>\n                    </div>\n                    <div class=\"route-option\">\n                        <input type=\"radio\" id=\"optimize-fuel\" name=\"route-optimization\" value=\"fuel\" />\n                        <label for=\"optimize-fuel\">Fuel Saving</label>\n                    </div>\n                    <div class=\"route-option\">\n                        <input type=\"radio\" id=\"optimize-cluster\" name=\"route-optimization\" value=\"cluster\" />\n                        <label for=\"optimize-cluster\">Local Clusters First</label>\n                    </div>\n                    <div class=\"route-option\">\n                        <input type=\"radio\" id=\"round-trip\" name=\"route-optimization\" value=\"roundtrip\" />\n                        <label for=\"round-trip\">Round Trip (return to start)</label>\n                    </div>\n                </div>",
                  "selector": "#postcode-search-group",
                  "position": "afterend"
                },
                {
                  "id": "route-constraints-options",
                  "type": "html",
                  "description": "Dropdown menus to manually set a specific start or end stop for the route.",
                  "code": "<div class=\"route-constraints\">\n                    <h3>Route Constraints</h3>\n                    <div class=\"input-group\">\n                        <label for=\"start-stop-select\">Start at stop</label>\n                        <select id=\"start-stop-select\">\n                            <option value=\"\">Automatic</option>\n                        </select>\n                    </div>\n                    <div class=\"input-group\">\n                        <label for=\"end-stop-select\">Finish at stop</label>\n                        <select id=\"end-stop-select\">\n                            <option value=\"\">Automatic</option>\n                        </select>\n                    </div>\n                </div>",
                  "selector": "#route-optimization-options",
                  "position": "afterend"
                },
                {
                  "id": "calculate-route-buttons",
                  "type": "html",
                  "description": "The main action button to calculate the optimized route.",
                  "code": "<div class=\"action-buttons\">\n                    <button id=\"calculate-route\" disabled=\"\">Calculate Route</button>\n                </div>",
                  "selector": "#route-constraints-options",
                  "position": "afterend"
                },
                {
                  "id": "view-live-route-button-container",
                  "type": "html",
                  "description": "A container for the button to switch to the live route view after calculation.",
                  "code": "<div class=\"action-buttons\" style=\"margin-top: 10px;\">\n                    <button id=\"view-live-route-btn\" style=\"grid-column: 1 / -1;\" disabled=\"\">View Live Route</button>\n                </div>",
                  "selector": "#calculate-route-buttons",
                  "position": "afterend"
                }
              ]
            },
            {
              "id": "stops-list-tab",
              "type": "html",
              "description": "The tab pane for viewing and managing the list of all added delivery stops.",
              "code": "<div id=\"stops-tab\" class=\"tab-pane\">\n                <div class=\"delivery-stops\">\n                    <h3>Delivery Stops (<span id=\"stop-count\">0</span>)</h3>\n                    <div class=\"stop-list-container\">\n                        <ul id=\"stop-list\" class=\"stop-list\"></ul>\n                    </div>\n                </div>\n            </div>",
              "selector": "#plan-route-tab",
              "position": "afterend"
            },
            {
              "id": "live-route-tab",
              "type": "html",
              "description": "The tab pane displaying the calculated route summary and sequence for live tracking.",
              "code": "<div id=\"route-tab\" class=\"tab-pane\"></div>",
              "selector": "#stops-list-tab",
              "position": "afterend",
              "children": [
                {
                  "id": "recalculate-route-button-live",
                  "type": "html",
                  "description": "A button to recalculate the route from the current location while in live mode.",
                  "code": "<div class=\"action-buttons\" style=\"margin-bottom: 15px; grid-template-columns: 1fr;\">\n                    <button id=\"recalculate-route-live\">Recalculate Route From Current Location</button>\n                </div>",
                  "selector": "#live-route-tab",
                  "position": "beforeend"
                },
                {
                  "id": "search-live-route-input-group",
                  "type": "html",
                  "description": "An input field to search and filter stops within the live route summary.",
                  "code": "<div class=\"input-group\">\n                    <label for=\"search-live-route\">Search Stops</label>\n                    <input type=\"text\" id=\"search-live-route\" placeholder=\"Search by address, notes, etc...\" />\n                </div>",
                  "selector": "#recalculate-route-button-live",
                  "position": "afterend"
                },
                {
                  "id": "route-summary-container",
                  "type": "html",
                  "description": "A container that displays the detailed route summary including distance and the ordered sequence of stops.",
                  "code": "<div id=\"route-summary\" class=\"route-summary\">\n                    <h3>Route Summary</h3>\n                    <p id=\"route-details\"></p>\n                    <ol id=\"route-sequence\"></ol>\n                </div>",
                  "selector": "#search-live-route-input-group",
                  "position": "afterend"
                }
              ]
            },
            {
              "id": "ai-assistant-tab",
              "type": "html",
              "description": "The tab pane containing the integrated AI Delivery Assistant chat interface.",
              "code": "<div id=\"ai-tab\" class=\"tab-pane\"></div>",
              "selector": "#live-route-tab",
              "position": "afterend",
              "children": [
                {
                  "id": "ai-tab-header",
                  "type": "html",
                  "description": "The header for the AI assistant chat interface within the tab.",
                  "code": "<div class=\"ai-chat-header\">\n                    <h3><span class=\"ai-chat-icon\">🤖</span> Delivery Assistant</h3>\n                </div>",
                  "selector": "#ai-assistant-tab",
                  "position": "beforeend"
                },
                {
                  "id": "ai-tab-body",
                  "type": "html",
                  "description": "The main body of the chat interface, displaying messages between the user and the AI.",
                  "code": "<div class=\"ai-chat-body\" id=\"ai-chat-body\">\n                    <div class=\"ai-message assistant\">\n                        Hello! I'm your delivery assistant. I can help with:\n                        <ul>\n                            <li>Optimal van loading</li>\n                            <li>Route reminders</li>\n                            <li>Parcel placement advice</li>\n                        </ul>\n                        Ask me anything about your route!\n                    </div>\n                </div>",
                  "selector": "#ai-tab-header",
                  "position": "afterend"
                },
                {
                  "id": "ai-tab-quick-actions",
                  "type": "html",
                  "description": "A set of quick action buttons for common AI prompts and settings.",
                  "code": "<div class=\"ai-chat-quick-actions\" id=\"ai-quick-actions\">\n                    <button class=\"ai-chat-quick-action\" data-prompt=\"How should I load my van?\">Loading advice</button>\n                    <button class=\"ai-chat-quick-action\" data-prompt=\"Any important reminders?\">Check reminders</button>\n                    <button class=\"ai-chat-quick-action\" data-prompt=\"Tell me about my next stop\">Next stop info</button>\n                    <button class=\"ai-chat-quick-action\" id=\"ai-settings-btn\">Settings</button>\n                </div>",
                  "selector": "#ai-tab-body",
                  "position": "afterend"
                },
                {
                  "id": "ai-tab-input-container",
                  "type": "html",
                  "description": "The input area for typing messages to the AI assistant.",
                  "code": "<div class=\"ai-chat-input-container\">\n                    <input type=\"text\" class=\"ai-chat-input\" id=\"ai-chat-input\" placeholder=\"Type your question...\" />\n                    <button class=\"ai-chat-send\" id=\"ai-chat-send\">→</button>\n                </div>",
                  "selector": "#ai-tab-quick-actions",
                  "position": "afterend"
                }
              ]
            },
            {
              "id": "options-tab",
              "type": "html",
              "description": "The tab pane for application settings, such as managing the Google Maps API key.",
              "code": "<div id=\"options-tab\" class=\"tab-pane\"></div>",
              "selector": "#ai-assistant-tab",
              "position": "afterend",
              "children": [
                {
                  "id": "api-key-group",
                  "type": "html",
                  "description": "The input group for entering and saving the Google Maps API key.",
                  "code": "<div class=\"input-group\">\n                    <label>Google Maps API Key</label>\n                    <div class=\"api-key-container\">\n                        <input type=\"password\" id=\"api-key-input\" placeholder=\"Enter Google Maps API Key\" />\n                        <button id=\"save-api-key\">Save Key</button>\n                        <span id=\"api-key-status\" class=\"api-key-status not-set\">Not set</span>\n                    </div>\n                </div>",
                  "selector": "#options-tab",
                  "position": "beforeend"
                },
                {
                  "id": "options-action-buttons",
                  "type": "html",
                  "description": "Action buttons for the options tab, including the 'Clear All' button.",
                  "code": "<div class=\"action-buttons\">\n                    <button id=\"clear-all\" class=\"clear-btn\">Clear All</button>\n                </div>",
                  "selector": "#api-key-group",
                  "position": "afterend"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "map-container",
      "type": "html",
      "description": "The main container where the Leaflet map is rendered.",
      "code": "<div id=\"map\"></div>",
      "selector": "#main-content-sidebar",
      "position": "afterend"
    },
    {
      "id": "close-map-button",
      "type": "html",
      "description": "A button to close or hide the map view.",
      "code": "<button class=\"close-map-btn\" id=\"close-map\">×</button>",
      "selector": "#map-container",
      "position": "afterend"
    },
    {
      "id": "notification-permission-banner",
      "type": "html",
      "description": "A banner that prompts the user to enable native notifications for route updates.",
      "code": "<div id=\"notification-permission-banner\" class=\"notification-permission-banner\">\n        <p>Enable notifications to get updates on your next stop directly on your device.</p>\n        <button id=\"enable-notifications\">Enable Notifications</button>\n        <button id=\"dismiss-notifications\" class=\"dismiss\">Dismiss</button>\n    </div>",
      "selector": "#close-map-button",
      "position": "afterend"
    },
    {
      "id": "note-modal-dialog",
      "type": "html",
      "description": "A modal dialog for adding or editing notes for a specific delivery stop.",
      "code": "<div id=\"note-modal\" class=\"note-modal\"></div>",
      "selector": "#notification-permission-banner",
      "position": "afterend",
      "children": [
        {
          "id": "note-modal-content-container",
          "type": "html",
          "description": "The main content panel of the note modal.",
          "code": "<div class=\"note-modal-content\">\n            <div class=\"note-modal-header\">\n                <h3 id=\"note-modal-title\">Stop Notes</h3>\n                <span class=\"note-modal-close\">×</span>\n            </div>\n            <textarea id=\"note-modal-text\" class=\"note-textarea\" placeholder=\"Enter notes about this stop...\"></textarea>\n            <div class=\"note-modal-footer\">\n                <button id=\"cancel-note\" class=\"clear-btn\">Cancel</button>\n                <button id=\"save-note\">Save</button>\n            </div>\n        </div>",
          "selector": "#note-modal-dialog",
          "position": "beforeend"
        }
      ]
    },
    {
      "id": "ai-chat-toggle-button",
      "type": "html",
      "description": "A floating action button to toggle the AI chat assistant window.",
      "code": "<button class=\"ai-chat-toggle\" id=\"ai-chat-toggle\" style=\"display: none;\">\n        <span class=\"ai-chat-toggle-icon\">🤖</span>\n        <span class=\"ai-chat-toggle-badge\" id=\"ai-notification-badge\" style=\"display: none;\">!</span>\n    </button>",
      "selector": "#note-modal-dialog",
      "position": "afterend"
    },
    {
      "id": "ai-chat-widget-container",
      "type": "html",
      "description": "The floating container for the AI chat assistant, which is functionally replaced by the AI tab.",
      "code": "<div class=\"ai-chat-container\" id=\"ai-chat-container\" style=\"display: none;\">\n        <div class=\"ai-chat-header\" id=\"ai-chat-header\">\n            <h3><span class=\"ai-chat-icon\">🤖</span> Delivery Assistant</h3>\n            <button class=\"ai-chat-close\" id=\"ai-chat-close\">×</button>\n        </div>\n        <div class=\"ai-chat-body\" id=\"ai-chat-body-old\">\n            <!-- Content moved to ai-tab -->\n        </div>\n        <div class=\"ai-chat-quick-actions\" id=\"ai-quick-actions-old\">\n            <!-- Content moved to ai-tab -->\n        </div>\n        <div class=\"ai-chat-input-container\" id=\"ai-chat-input-container-old\">\n            <!-- Content moved to ai-tab -->\n        </div>\n    </div>",
      "selector": "#ai-chat-toggle-button",
      "position": "afterend"
    },
    {
      "id": "ai-settings-modal-dialog",
      "type": "html",
      "description": "A modal dialog for configuring the AI assistant's settings, including training data and parcel scanning.",
      "code": "<div id=\"ai-settings-modal\" class=\"ai-settings-modal\"></div>",
      "selector": "#ai-chat-widget-container",
      "position": "afterend",
      "children": [
        {
          "id": "ai-settings-modal-content",
          "type": "html",
          "description": "The content panel for the AI settings modal.",
          "code": "<div class=\"ai-settings-content\">\n            <div class=\"ai-settings-header\">\n                <h3>AI Assistant Settings</h3>\n                <span class=\"ai-settings-close\">×</span>\n            </div>\n            <div>\n                <h4>Train AI with Past Routes</h4>\n                <p style=\"font-size: 0.8em; color: #666; margin-top: -10px;\">Provide data about past routes to improve AI suggestions. The AI will learn patterns from this data.</p>\n                <textarea id=\"ai-training-data\" class=\"ai-training-data\" placeholder=\"Paste past route data here (format: Address1, Notes1; Address2, Notes2; ...)\"></textarea>\n                <button id=\"train-ai\">Train AI with This Data</button>\n            </div>\n            <div class=\"scanner-input\">\n                <h4>Parcel Scanner</h4>\n                <input type=\"text\" id=\"parcel-scan\" placeholder=\"Scan or enter parcel barcode...\" />\n                <button id=\"scan-parcel\">Find Parcel Info</button>\n            </div>\n            <div class=\"ai-settings-footer\">\n                <button id=\"close-ai-settings\" class=\"clear-btn\">Close</button>\n            </div>\n        </div>",
          "selector": "#ai-settings-modal-dialog",
          "position": "beforeend"
        }
      ]
    },
    {
      "id": "postcode-scanner-modal-dialog",
      "type": "html",
      "description": "A modal dialog that uses the device camera to scan and recognize UK postcodes.",
      "code": "<div id=\"postcode-scanner-modal\" class=\"scanner-modal\"></div>",
      "selector": "#ai-settings-modal-dialog",
      "position": "afterend",
      "children": [
        {
          "id": "scanner-modal-content-container",
          "type": "html",
          "description": "The content panel for the postcode scanner modal, containing the video feed and results.",
          "code": "<div class=\"scanner-modal-content\">\n            <div class=\"scanner-modal-header\">\n                <h3>Scan Postcode</h3>\n                <span id=\"scanner-modal-close\" class=\"scanner-modal-close\">×</span>\n            </div>\n            <div class=\"scanner-body\">\n                <video id=\"scanner-video\" playsinline=\"\"></video>\n                <canvas id=\"scanner-canvas\" style=\"display: none;\"></canvas>\n                <div id=\"scanner-overlay\">\n                    <div class=\"scanner-box\"></div>\n                    <p class=\"scanner-instructions\">Position the postcode inside the box</p>\n                </div>\n            </div>\n            <div id=\"scanner-result-container\" style=\"display: none;\">\n                <p>Found postcode: <strong id=\"scanned-postcode-result\"></strong></p>\n                <button id=\"confirm-postcode-btn\">Use this postcode</button>\n                <button id=\"retry-scan-btn\" class=\"clear-btn\">Scan Again</button>\n            </div>\n            <div class=\"scanner-modal-footer\">\n                <p id=\"scanner-status\">Starting camera...</p>\n            </div>\n        </div>",
          "selector": "#postcode-scanner-modal-dialog",
          "position": "beforeend"
        }
      ]
    },
    {
      "id": "global-variables-and-initialization",
      "type": "javascript",
      "description": "Initializes the map, application state, DOM element references, and Google Maps services.",
      "code": "// Initialize the map centered on Great Britain\n        const map = L.map('map').setView([54.5, -4], 6);\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            maxZoom: 19,\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(map);\n\n        // Application state\n        const state = {\n            apiKey: localStorage.getItem('googleMapsApiKey') || '',\n            startLocation: null,\n            deliveryStops: [],\n            selectedDeliveryLocation: null,\n            routeCalculated: false,\n            optimizationMethod: localStorage.getItem('routeOptimizationMethod') || 'time',\n            mapVisible: localStorage.getItem('mapVisible') === 'true' || false,\n            currentNoteIndex: null,\n            startStopOverride: null,\n            endStopOverride: null,\n            geminiApiKey: localStorage.getItem('geminiApiKey') || '',\n            aiTrainingData: localStorage.getItem('aiTrainingData') || '',\n            currentStopIndex: 0,\n            hasNewAiNotification: false,\n            isScanning: false,\n            scanIntervalId: null,\n            videoStream: null\n        };\n\n        // Google Maps SDK Services\n        let autocompleteService;\n        let placesService;\n        let geocoder;\n\n        // DOM elements\n        const elements = {\n            hamburgerMenuBtn: document.getElementById('hamburger-menu-btn'),\n            sideMenu: document.getElementById('side-menu'),\n            menuItems: document.querySelectorAll('.menu-item'),\n            toggleMapMenuItem: document.getElementById('toggle-map-menu-item'),\n            apiKeyInput: document.getElementById('api-key-input'),\n            saveApiKeyBtn: document.getElementById('save-api-key'),\n            apiKeyStatus: document.getElementById('api-key-status'),\n            startLocationInput: document.getElementById('start-location'),\n            startSuggestions: document.getElementById('start-suggestions'),\n            deliveryLocationInput: document.getElementById('delivery-location'),\n            deliverySuggestions: document.getElementById('delivery-suggestions'),\n            stopNotesInput: document.getElementById('stop-notes'),\n            addStopBtn: document.getElementById('add-stop'),\n            stopList: document.getElementById('stop-list'),\n            stopCount: document.getElementById('stop-count'),\n            calculateRouteBtn: document.getElementById('calculate-route'),\n            clearAllBtn: document.getElementById('clear-all'),\n            routeSummary: document.getElementById('route-summary'),\n            routeDetails: document.getElementById('route-details'),\n            routeSequence: document.getElementById('route-sequence'),\n            postcodeSearchInput: document.getElementById('postcode-search'),\n            searchPostcodeBtn: document.getElementById('search-postcode'),\n            addressResults: document.getElementById('address-results'),\n            optimizeDistance: document.getElementById('optimize-distance'),\n            optimizeTime: document.getElementById('optimize-time'),\n            optimizeFuel: document.getElementById('optimize-fuel'),\n            roundTrip: document.getElementById('round-trip'),\n            toggleMapBtn: document.getElementById('toggle-map'),\n            mapContainer: document.getElementById('map'),\n            closeMapBtn: document.getElementById('close-map'),\n            locationStatus: document.getElementById('location-status'),\n            requestLocationBtn: document.getElementById('request-location'),\n            noteModal: document.getElementById('note-modal'),\n            noteModalTitle: document.getElementById('note-modal-title'),\n            noteModalText: document.getElementById('note-modal-text'),\n            saveNoteBtn: document.getElementById('save-note'),\n            cancelNoteBtn: document.getElementById('cancel-note'),\n            noteModalClose: document.querySelector('.note-modal-close'),\n            // AI Assistant elements\n            aiChatToggle: document.getElementById('ai-chat-toggle'),\n            aiChatContainer: document.getElementById('ai-chat-container'),\n            aiChatHeader: document.getElementById('ai-chat-header'),\n            aiChatClose: document.getElementById('ai-chat-close'),\n            aiChatBody: document.getElementById('ai-chat-body'),\n            aiChatInput: document.getElementById('ai-chat-input'),\n            aiChatSend: document.getElementById('ai-chat-send'),\n            aiQuickActions: document.getElementById('ai-quick-actions'),\n            aiNotificationBadge: document.getElementById('ai-notification-badge'),\n            // AI Settings elements\n            aiSettingsModal: document.getElementById('ai-settings-modal'),\n            aiSettingsBtn: document.getElementById('ai-settings-btn'),\n            aiSettingsClose: document.querySelector('.ai-settings-close'),\n            closeAiSettings: document.getElementById('close-ai-settings'),\n            aiTrainingData: document.getElementById('ai-training-data'),\n            trainAiBtn: document.getElementById('train-ai'),\n            parcelScanInput: document.getElementById('parcel-scan'),\n            scanParcelBtn: document.getElementById('scan-parcel'),\n            // Notification Banner\n            notificationBanner: document.getElementById('notification-permission-banner'),\n            enableNotificationsBtn: document.getElementById('enable-notifications'),\n            dismissNotificationsBtn: document.getElementById('dismiss-notifications'),\n            // Tabs\n            tabButtons: document.querySelectorAll('.tab-button'), // Kept for logic, but UI is hidden\n            tabPanes: document.querySelectorAll('.tab-pane'),\n            optimizeCluster: document.getElementById('optimize-cluster'),\n            // Postcode Scanner elements\n            scanPostcodeBtn: document.getElementById('scan-postcode-btn'),\n            startStopSelect: document.getElementById('start-stop-select'),\n            endStopSelect: document.getElementById('end-stop-select'),\n            postcodeScannerModal: document.getElementById('postcode-scanner-modal'),\n            scannerModalClose: document.getElementById('scanner-modal-close'),\n            scannerVideo: document.getElementById('scanner-video'),\n            scannerCanvas: document.getElementById('scanner-canvas'),\n            scannerStatus: document.getElementById('scanner-status'),\n            scannerResultContainer: document.getElementById('scanner-result-container'),\n            scannedPostcodeResult: document.getElementById('scanned-postcode-result'),\n            confirmPostcodeBtn: document.getElementById('confirm-postcode-btn'),\n            retryScanBtn: document.getElementById('retry-scan-btn'),\n            recalculateRouteLiveBtn: document.getElementById('recalculate-route-live'),\n            searchLiveRouteInput: document.getElementById('search-live-route'),\n            viewLiveRouteBtn: document.getElementById('view-live-route-btn')\n        };\ninit();"
    },
    {
      "id": "function-handle-location-input",
      "type": "js-function",
      "description": "Handles user input for location fields, fetches autocomplete suggestions from Google Maps API, and updates application state.",
      "code": "async function handleLocationInput(inputElement, suggestionsElement, isStartLocation) {\n            const query = inputElement.value.trim();\n            suggestionsElement.innerHTML = '';\n            suggestionsElement.style.display = 'none';\n\n            if (isStartLocation) {\n                if (state.startLocation && state.startLocation.address !== query) {\n                    state.startLocation = null;\n                }\n            } else {\n                 if (state.selectedDeliveryLocation && state.selectedDeliveryLocation.address !== query) {\n                    state.selectedDeliveryLocation = null;\n                    elements.addStopBtn.disabled = true;\n                }\n            }\n\n            if (query.length < 3) return;\n\n            if (!state.apiKey) {\n                const noApiDiv = document.createElement('div');\n                noApiDiv.className = 'suggestion-item no-results';\n                noApiDiv.textContent = 'Please set Google Maps API key in Options.';\n                suggestionsElement.appendChild(noApiDiv);\n                suggestionsElement.style.display = 'block';\n                return;\n            }\n\n            if (!autocompleteService) {\n                console.error(\"Google Maps AutocompleteService not initialized.\");\n                const noApiDiv = document.createElement('div');\n                noApiDiv.className = 'suggestion-item no-results';\n                noApiDiv.textContent = 'Autocomplete service is not ready.';\n                suggestionsElement.appendChild(noApiDiv);\n                suggestionsElement.style.display = 'block';\n                return;\n            }\n            \n            autocompleteService.getPlacePredictions({ \n                input: query,\n                componentRestrictions: { country: 'gb' }\n            }, (predictions, status) => {\n                if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {\n                    displaySuggestions(predictions, inputElement, suggestionsElement, isStartLocation);\n                } else if (status === google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {\n                    const noResultDiv = document.createElement('div');\n                    noResultDiv.className = 'suggestion-item no-results';\n                    noResultDiv.textContent = 'No results found.';\n                    suggestionsElement.appendChild(noResultDiv);\n                    suggestionsElement.style.display = 'block';\n                } else if (status === google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {\n                     alert(`Google Maps API Error: Autocomplete request denied. Please check your API key and ensure the Places API is enabled.`);\n                } else {\n                    console.error('Google Autocomplete Service Error:', status);\n                }\n            });\n        }"
    },
    {
      "id": "function-display-suggestions",
      "type": "js-function",
      "description": "Renders the location suggestions in a dropdown list and handles the selection of a suggestion.",
      "code": "function displaySuggestions(predictions, inputElement, suggestionsElement, isStartLocation) {\n            suggestionsElement.innerHTML = '';\n            if (predictions.length === 0) {\n                suggestionsElement.style.display = 'none';\n                return;\n            }\n\n            predictions.forEach(prediction => {\n                const div = document.createElement('div');\n                div.className = 'suggestion-item';\n                div.textContent = prediction.description;\n                div.addEventListener('click', () => {\n                    inputElement.value = prediction.description;\n                    suggestionsElement.style.display = 'none';\n                    \n                    if (!placesService) {\n                        alert(\"Places service not ready. Cannot get location details.\");\n                        return;\n                    }\n                    \n                    placesService.getDetails({\n                        placeId: prediction.place_id,\n                        fields: ['geometry', 'formatted_address', 'name']\n                    }, (place, status) => {\n                        if (status === google.maps.places.PlacesServiceStatus.OK && place && place.geometry && place.geometry.location) {\n                            const locationData = {\n                                address: place.formatted_address,\n                                coordinates: [place.geometry.location.lat(), place.geometry.location.lng()],\n                                notes: ''\n                            };\n\n                            if (isStartLocation) {\n                                state.startLocation = locationData;\n                                elements.startLocationInput.value = locationData.address;\n                                updateMapMarkers();\n                                updateCalculateRouteButton();\n                            } else {\n                                state.selectedDeliveryLocation = locationData;\n                                elements.deliveryLocationInput.value = locationData.address;\n                                elements.addStopBtn.disabled = false;\n                            }\n                        } else {\n                            console.error(\"Error getting place details:\", status);\n                            alert(\"Could not retrieve location details. Please try again.\");\n                        }\n                    });\n                });\n                suggestionsElement.appendChild(div);\n            });\n\n            suggestionsElement.style.display = 'block';\n        }"
    },
    {
      "id": "function-debounce",
      "type": "js-function",
      "description": "A utility function to delay the execution of a function until after a certain time has passed without it being called.",
      "code": "function debounce(func, wait) {\n            let timeout;\n            return function executedFunction(...args) {\n                const later = () => {\n                    clearTimeout(timeout);\n                    func(...args);\n                };\n                clearTimeout(timeout);\n                timeout = setTimeout(later, wait);\n            };\n        }"
    },
    {
      "id": "function-toggle-side-menu",
      "type": "js-function",
      "description": "Toggles the visibility of the side navigation menu by adding or removing the 'visible' class.",
      "code": "function toggleSideMenu() {\n            elements.sideMenu.classList.toggle('visible');\n        }"
    },
    {
      "id": "function-get-updated-current-location",
      "type": "js-function",
      "description": "Asynchronously retrieves the user's current geographic location and reverse-geocodes it to an address.",
      "code": "function getUpdatedCurrentLocation() {\n            return new Promise((resolve, reject) => {\n                if (!navigator.geolocation) {\n                    return reject(\"Geolocation is not supported by your browser\");\n                }\n\n                navigator.geolocation.getCurrentPosition(\n                    async (position) => {\n                        const { latitude, longitude } = position.coords;\n                        try {\n                            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);\n                            const data = await response.json();\n                            let address = data.display_name || `Current Location (${latitude.toFixed(4)}, ${longitude.toFixed(4)})`;\n                            const locationData = {\n                                address: address,\n                                coordinates: [latitude, longitude],\n                                notes: state.startLocation?.notes || '' // preserve notes if possible\n                            };\n                            resolve(locationData);\n                        } catch (error) {\n                            // If reverse geocoding fails, just use coordinates\n                            const locationData = {\n                                address: `Current Location (${latitude.toFixed(4)}, ${longitude.toFixed(4)})`,\n                                coordinates: [latitude, longitude],\n                                notes: state.startLocation?.notes || ''\n                            };\n                            resolve(locationData);\n                        }\n                    },\n                    (error) => {\n                        let errorMessage = \"Unable to retrieve your location\";\n                        switch(error.code) {\n                            case error.PERMISSION_DENIED:\n                                errorMessage = \"Location access denied. Please enable location services in your browser settings.\";\n                                break;\n                            case error.POSITION_UNAVAILABLE:\n                                errorMessage = \"Location information unavailable.\";\n                                break;\n                            case error.TIMEOUT:\n                                errorMessage = \"Location request timed out.\";\n                                break;\n                        }\n                        reject(errorMessage);\n                    },\n                    {\n                        enableHighAccuracy: true,\n                        timeout: 10000,\n                        maximumAge: 0\n                    }\n                );\n            });\n        }"
    },
    {
      "id": "function-toggle-map-visibility",
      "type": "js-function",
      "description": "Toggles the visibility of the map container, updates local storage, and invalidates the map size to ensure correct rendering.",
      "code": "function toggleMapVisibility() {\n            state.mapVisible = !state.mapVisible;\n            localStorage.setItem('mapVisible', state.mapVisible.toString());\n            \n            if (state.mapVisible) {\n                elements.mapContainer.classList.add('visible');\n                elements.toggleMapBtn.textContent = 'Hide Map';\n                elements.toggleMapBtn.classList.add('visible');\n                // Trigger map resize to ensure proper rendering\n                setTimeout(() => {\n                    map.invalidateSize();\n                    if (state.routeCalculated && state.startLocation && state.deliveryStops.length > 0) {\n                         // Re-calculate to restore state and re-render UI correctly\n                        const stopsBackup = [...state.deliveryStops];\n                        calculateRoute(true);\n                        state.deliveryStops = stopsBackup; // Restore original loaded order before re-optimizing\n                    } else if (state.startLocation) {\n                        map.setView(state.startLocation.coordinates, 15);\n                    } else if (state.deliveryStops.length > 0) {\n                        const bounds = L.latLngBounds(state.deliveryStops.map(stop => stop.coordinates));\n                        map.fitBounds(bounds, { padding: [50, 50] });\n                    }\n                }, 300);\n            } else {\n                elements.mapContainer.classList.remove('visible');\n                elements.toggleMapBtn.textContent = 'Show Map';\n                elements.toggleMapBtn.classList.remove('visible');\n            }\n        }"
    },
    {
      "id": "function-check-location-permission",
      "type": "js-function",
      "description": "Checks the browser's geolocation permission status and updates the UI accordingly.",
      "code": "function checkLocationPermission() {\n            if (!navigator.permissions) {\n                // Browser doesn't support Permissions API\n                elements.locationStatus.textContent = \"Location permission status unavailable\";\n                elements.locationStatus.className = \"location-status location-error\";\n                elements.requestLocationBtn.style.display = 'inline-block';\n                return;\n            }\n\n            navigator.permissions.query({name: 'geolocation'}).then(permissionStatus => {\n                updatePermissionUI(permissionStatus.state);\n                \n                permissionStatus.onchange = () => {\n                    updatePermissionUI(permissionStatus.state);\n                };\n            }).catch(error => {\n                console.error(\"Error checking location permission:\", error);\n                elements.locationStatus.textContent = \"Error checking location permission\";\n                elements.locationStatus.className = \"location-status location-error\";\n                elements.requestLocationBtn.style.display = 'inline-block';\n            });\n        }"
    },
    {
      "id": "function-update-permission-ui",
      "type": "js-function",
      "description": "Updates the UI elements related to location permission based on the current permission state ('granted', 'prompt', or 'denied').",
      "code": "function updatePermissionUI(state) {\n            if (state === 'granted') {\n                elements.locationStatus.textContent = \"Location permission granted\";\n                elements.locationStatus.className = \"location-status location-success\";\n                elements.requestLocationBtn.style.display = 'none';\n                getCurrentLocation();\n            } else if (state === 'prompt') {\n                elements.locationStatus.textContent = \"Location permission not granted yet\";\n                elements.locationStatus.className = \"location-status\";\n                elements.requestLocationBtn.style.display = 'inline-block';\n            } else if (state === 'denied') {\n                elements.locationStatus.textContent = \"Location permission denied. Please enable it in browser settings.\";\n                elements.locationStatus.className = \"location-status location-error\";\n                elements.requestLocationBtn.style.display = 'inline-block';\n            }\n        }"
    },
    {
      "id": "function-get-current-location",
      "type": "js-function",
      "description": "Uses the Geolocation API to get the user's current position and updates the start location in the application state.",
      "code": "function getCurrentLocation() {\n            elements.locationStatus.textContent = \"Getting your current location...\";\n            elements.locationStatus.className = \"location-status location-loading\";\n\n            if (!navigator.geolocation) {\n                elements.locationStatus.textContent = \"Geolocation is not supported by your browser\";\n                elements.locationStatus.className = \"location-status location-error\";\n                elements.requestLocationBtn.style.display = 'inline-block';\n                return;\n            }\n\n            navigator.geolocation.getCurrentPosition(\n                async (position) => {\n                    const { latitude, longitude } = position.coords;\n                    \n                    // Try to reverse geocode to get address\n                    try {\n                        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);\n                        const data = await response.json();\n                        \n                        let address = \"Current Location\";\n                        if (data.display_name) {\n                            address = data.display_name;\n                        }\n\n                        state.startLocation = {\n                            address: address,\n                            coordinates: [latitude, longitude],\n                            notes: ''\n                        };\n\n                        elements.startLocationInput.value = address;\n                        elements.locationStatus.textContent = \"Using your current location for calculation\";\n                        elements.locationStatus.className = \"location-status location-success\";\n                        elements.requestLocationBtn.style.display = 'none';\n                        \n                        updateMapMarkers();\n                        updateCalculateRouteButton();\n                        saveState();\n                    } catch (error) {\n                        // If reverse geocoding fails, just use coordinates\n                        state.startLocation = {\n                            address: `Current Location (${latitude.toFixed(4)}, ${longitude.toFixed(4)})`,\n                            coordinates: [latitude, longitude],\n                            notes: ''\n                        };\n\n                        elements.startLocationInput.value = state.startLocation.address;\n                        elements.locationStatus.textContent = \"Using your current coordinates\";\n                        elements.locationStatus.className = \"location-status location-success\";\n                        elements.requestLocationBtn.style.display = 'none';\n                        \n                        updateMapMarkers();\n                        updateCalculateRouteButton();\n                        saveState();\n                    }\n                },\n                (error) => {\n                    let errorMessage = \"Unable to retrieve your location\";\n                    switch(error.code) {\n                        case error.PERMISSION_DENIED:\n                            errorMessage = \"Location access denied. Please enable location services in your browser settings.\";\n                            elements.requestLocationBtn.style.display = 'inline-block';\n                            break;\n                        case error.POSITION_UNAVAILABLE:\n                            errorMessage = \"Location information unavailable.\";\n                            break;\n                        case error.TIMEOUT:\n                            errorMessage = \"Location request timed out.\";\n                            elements.requestLocationBtn.style.display = 'inline-block';\n                            break;\n                    }\n                    elements.locationStatus.textContent = errorMessage;\n                    elements.locationStatus.className = \"location-status location-error\";\n                },\n                {\n                    enableHighAccuracy: true,\n                    timeout: 10000,\n                    maximumAge: 0\n                }\n            );\n        }"
    },
    {
      "id": "function-init",
      "type": "js-function",
      "description": "Initializes the application by setting up saved state, checking permissions, and adding all necessary event listeners.",
      "code": "function init() {\n            // Set saved API key if exists\n            if (state.apiKey) {\n                elements.apiKeyInput.value = state.apiKey;\n                updateApiKeyStatus(true);\n                loadGoogleMapsSDK(); // Load SDK with the key\n            } else {\n                updateApiKeyStatus(false);\n            }\n\n            // Set saved optimization method\n            if (state.optimizationMethod === 'distance') {\n                elements.optimizeDistance.checked = true;\n            } else if (state.optimizationMethod === 'time') {\n                elements.optimizeTime.checked = true;\n            } else if (state.optimizationMethod === 'fuel') {\n                elements.optimizeFuel.checked = true;\n            } else if (state.optimizationMethod === 'roundtrip') {\n                elements.roundTrip.checked = true;\n            }\n\n            // Set initial map visibility\n            if (state.mapVisible) {\n                toggleMapVisibility();\n            }\n\n            // Set AI training data if exists\n            if (state.aiTrainingData) {\n                elements.aiTrainingData.value = state.aiTrainingData;\n            }\n\n            // Load saved state if exists\n            loadSavedState();\n\n            // Check location permission\n            checkLocationPermission();\n\n            // Event listeners\n            elements.hamburgerMenuBtn.addEventListener('click', toggleSideMenu);\n            document.addEventListener('click', (e) => {\n                if (elements.sideMenu.classList.contains('visible') && !elements.sideMenu.contains(e.target) && !elements.hamburgerMenuBtn.contains(e.target)) {\n                    toggleSideMenu();\n                }\n            });\n            \n            elements.menuItems.forEach(item => {\n                item.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const tabId = item.dataset.tab;\n                    if (tabId) {\n                        switchTab(tabId);\n                        toggleSideMenu();\n                    }\n                });\n            });\n\n            elements.saveApiKeyBtn.addEventListener('click', saveApiKey);\n            elements.startLocationInput.addEventListener('input', debounce(() => handleLocationInput(elements.startLocationInput, elements.startSuggestions, true), 300));\n            elements.deliveryLocationInput.addEventListener('input', debounce(() => handleLocationInput(elements.deliveryLocationInput, elements.deliverySuggestions, false), 300));\n            elements.addStopBtn.addEventListener('click', addDeliveryStop);\n            elements.calculateRouteBtn.addEventListener('click', calculateRoute);\n            elements.clearAllBtn.addEventListener('click', clearAll);\n            elements.searchPostcodeBtn.addEventListener('click', searchPostcodeForResults);\n            elements.toggleMapMenuItem.addEventListener('click', (e) => {\n                e.preventDefault();\n                toggleMapVisibility();\n                toggleSideMenu();\n            });\n            elements.closeMapBtn.addEventListener('click', toggleMapVisibility);\n            elements.requestLocationBtn.addEventListener('click', requestLocationPermission);\n            elements.saveNoteBtn.addEventListener('click', saveNote);\n            elements.cancelNoteBtn.addEventListener('click', closeNoteModal);\n            elements.noteModalClose.addEventListener('click', closeNoteModal);\n\n            // AI Chat event listeners\n            elements.aiChatSend.addEventListener('click', sendAiMessage);\n            elements.aiChatInput.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') sendAiMessage();\n            });\n            \n            // Quick action buttons\n            document.querySelectorAll('.ai-chat-quick-action').forEach(button => {\n                if (button.id !== 'ai-settings-btn') {\n                    button.addEventListener('click', (e) => {\n                        const prompt = e.target.getAttribute('data-prompt');\n                        elements.aiChatInput.value = prompt;\n                        sendAiMessage();\n                    });\n                }\n            });\n\n            // AI Settings event listeners\n            elements.aiSettingsBtn.addEventListener('click', openAiSettings);\n            elements.aiSettingsClose.addEventListener('click', closeAiSettings);\n            elements.closeAiSettings.addEventListener('click', closeAiSettings);\n            elements.trainAiBtn.addEventListener('click', trainAiWithData);\n            elements.scanParcelBtn.addEventListener('click', handleParcelScan);\n\n            // Notification permission banner listeners\n            elements.enableNotificationsBtn.addEventListener('click', requestNotificationPermission);\n            elements.dismissNotificationsBtn.addEventListener('click', () => {\n                elements.notificationBanner.style.display = 'none';\n            });\n\n            // Postcode Scanner event listeners\n            elements.scanPostcodeBtn.addEventListener('click', startPostcodeScanner);\n            elements.scannerModalClose.addEventListener('click', stopPostcodeScanner);\n            elements.confirmPostcodeBtn.addEventListener('click', () => {\n                elements.postcodeSearchInput.value = elements.scannedPostcodeResult.textContent;\n                stopPostcodeScanner();\n                elements.searchPostcodeBtn.click(); // Automatically search after confirming\n            });\n            elements.retryScanBtn.addEventListener('click', () => {\n                elements.scannerResultContainer.style.display = 'none';\n                elements.scannerStatus.textContent = 'Scanning...';\n                startScanInterval();\n            });\n\n            // Close modals when clicking outside\n            window.addEventListener('click', (event) => {\n                if (event.target === elements.noteModal) {\n                    closeNoteModal();\n                }\n                if (event.target === elements.aiSettingsModal) {\n                    closeAiSettings();\n                }\n            });\n\n            // Route optimization selection\n            elements.optimizeDistance.addEventListener('change', () => {\n                if (elements.optimizeDistance.checked) {\n                    state.optimizationMethod = 'closest-to-start';\n                    localStorage.setItem('routeOptimizationMethod', 'closest-to-start');\n                }\n            });\n            elements.optimizeTime.addEventListener('change', () => {\n                if (elements.optimizeTime.checked) {\n                    state.optimizationMethod = 'time';\n                    localStorage.setItem('routeOptimizationMethod', 'time');\n                }\n            });\n            elements.optimizeFuel.addEventListener('change', () => {\n                if (elements.optimizeFuel.checked) {\n                    state.optimizationMethod = 'fuel';\n                    localStorage.setItem('routeOptimizationMethod', 'fuel');\n                }\n            });\n            elements.optimizeCluster.addEventListener('change', () => {\n                if (elements.optimizeCluster.checked) {\n                    state.optimizationMethod = 'cluster';\n                    localStorage.setItem('routeOptimizationMethod', 'cluster');\n                }\n            });\n            elements.roundTrip.addEventListener('change', () => {\n                if (elements.roundTrip.checked) {\n                    state.optimizationMethod = 'roundtrip';\n                    localStorage.setItem('routeOptimizationMethod', 'roundtrip');\n                }\n            });\n\n            elements.deliveryLocationInput.addEventListener('input', () => {\n                 if (state.selectedDeliveryLocation && elements.deliveryLocationInput.value !== state.selectedDeliveryLocation.address) {\n                     state.selectedDeliveryLocation = null;\n                     elements.addStopBtn.disabled = true;\n                 }\n            });\n            \n            elements.startLocationInput.addEventListener('input', () => {\n                 if (state.startLocation && elements.startLocationInput.value !== state.startLocation.address) {\n                     state.startLocation = null;\n                     updateMapMarkers();\n                     updateCalculateRouteButton();\n                 }\n            });\n\n            document.addEventListener('click', (e) => {\n                 if (!elements.startLocationInput.contains(e.target) && !elements.startSuggestions.contains(e.target)) {\n                    elements.startSuggestions.style.display = 'none';\n                }\n                 if (!elements.deliveryLocationInput.contains(e.target) && !elements.deliverySuggestions.contains(e.target)) {\n                    elements.deliverySuggestions.style.display = 'none';\n                }\n                 if (!elements.postcodeSearchInput.contains(e.target) && !elements.searchPostcodeBtn.contains(e.target) && !elements.addressResults.contains(e.target)) {\n                    elements.addressResults.style.display = 'none';\n                }\n            });\n\n            elements.viewLiveRouteBtn.addEventListener('click', () => {\n                switchTab('route-tab');\n            });\n\n            elements.startStopSelect.addEventListener('change', (e) => {\n                state.startStopOverride = e.target.value || null;\n                saveState();\n            });\n\n            elements.endStopSelect.addEventListener('change', (e) => {\n                state.endStopOverride = e.target.value || null;\n                saveState();\n            });\n\n            updateCalculateRouteButton();\n            updateViewLiveRouteButton();\n        }"
    },
    {
      "id": "function-check-notification-permission",
      "type": "js-function",
      "description": "Checks if the browser supports notifications and displays a permission banner if permission has not yet been granted or denied.",
      "code": "function checkNotificationPermission() {\n            if (!('Notification' in window)) {\n                console.log(\"This browser does not support desktop notification\");\n                return;\n            }\n\n            if (Notification.permission === 'default') {\n                elements.notificationBanner.style.display = 'block';\n            } else {\n                elements.notificationBanner.style.display = 'none';\n            }\n        }"
    },
    {
      "id": "function-request-notification-permission",
      "type": "js-function",
      "description": "Requests permission from the user to send desktop notifications.",
      "code": "function requestNotificationPermission() {\n            elements.notificationBanner.style.display = 'none';\n            if (!('Notification' in window)) return;\n            \n            Notification.requestPermission().then(permission => {\n                if (permission === 'granted') {\n                    new Notification('paRoad Notifications', {\n                        body: 'You will now receive updates on your next stop directly on your device.',\n                        tag: 'paRoad-setup'\n                    });\n                }\n            });\n        }"
    },
    {
      "id": "function-show-current-stop-notification",
      "type": "js-function",
      "description": "Displays a persistent desktop notification about the current or next stop in the route.",
      "code": "async function showCurrentStopNotification(stop) {\n            if (!('Notification' in window) || Notification.permission !== 'granted') {\n                return;\n            }\n\n            const title = `Next Stop: ${stop.address.split(',')[0]}`;\n            const options = {\n                body: stop.address,\n                tag: 'current-stop-notification', // Replaces any existing notification with the same tag\n                renotify: true, // Notifies user even if a notification with same tag exists\n                requireInteraction: true, // Makes notification persistent on some platforms (e.g., desktop)\n            };\n            \n            try {\n                // Ensure service worker is ready before showing notification\n                const registration = await navigator.serviceWorker.getRegistration();\n                if (registration) {\n                    await registration.showNotification(title, options);\n                } else {\n                     new Notification(title, options); // Fallback for when SW not available\n                }\n            } catch (err) {\n                console.error('Notification error:', err);\n                new Notification(title, options); // Fallback to basic notification\n            }\n        }"
    },
    {
      "id": "function-toggle-ai-chat",
      "type": "js-function",
      "description": "Toggles the visibility of the floating AI chat container.",
      "code": "function toggleAiChat() {\n            elements.aiChatContainer.classList.toggle('visible');\n            if (elements.aiChatContainer.classList.contains('visible')) {\n                // Clear notification when chat is opened\n                state.hasNewAiNotification = false;\n                updateAiNotificationBadge();\n                // Scroll to bottom\n                setTimeout(() => {\n                    elements.aiChatBody.scrollTop = elements.aiChatBody.scrollHeight;\n                }, 100);\n            }\n        }"
    },
    {
      "id": "function-update-ai-notification-badge",
      "type": "js-function",
      "description": "Shows or hides a notification badge on the AI assistant tab button based on the application state.",
      "code": "function updateAiNotificationBadge() {\n            const aiTabButton = document.querySelector('.tab-button[data-tab=\"ai-tab\"]');\n            if (!aiTabButton) return;\n        \n            if (state.hasNewAiNotification) {\n                if (!aiTabButton.querySelector('.tab-notification-badge')) {\n                    const badge = document.createElement('span');\n                    badge.className = 'tab-notification-badge';\n                    aiTabButton.appendChild(badge);\n                }\n                aiTabButton.classList.add('has-notification');\n            } else {\n                aiTabButton.classList.remove('has-notification');\n            }\n        }"
    },
    {
      "id": "function-add-ai-message",
      "type": "js-function",
      "description": "Adds a new message to the AI chat interface, distinguishing between user and assistant messages.",
      "code": "function addAiMessage(text, isUser = false) {\n            const messageDiv = document.createElement('div');\n            messageDiv.className = `ai-message ${isUser ? 'user' : 'assistant'}`;\n            messageDiv.innerHTML = text.replace(/\\n/g, '<br>');\n            elements.aiChatBody.appendChild(messageDiv);\n            \n            // Scroll to bottom\n            elements.aiChatBody.scrollTop = elements.aiChatBody.scrollHeight;\n            \n            // Show notification badge if AI tab is not visible\n            const aiTabIsActive = document.getElementById('ai-tab').classList.contains('active');\n            if (!isUser && !aiTabIsActive) {\n                state.hasNewAiNotification = true;\n                updateAiNotificationBadge();\n            }\n        }"
    },
    {
      "id": "function-send-ai-message",
      "type": "js-function",
      "description": "Sends the user's message to the AI, displays it in the chat, and processes the AI's response.",
      "code": "async function sendAiMessage() {\n            const message = elements.aiChatInput.value.trim();\n            if (!message) return;\n\n            // Add user message to chat\n            addAiMessage(message, true);\n            elements.aiChatInput.value = '';\n\n            // Show typing indicator\n            const typingIndicator = document.createElement('div');\n            typingIndicator.className = 'ai-message assistant';\n            typingIndicator.textContent = 'Thinking...';\n            elements.aiChatBody.appendChild(typingIndicator);\n            elements.aiChatBody.scrollTop = elements.aiChatBody.scrollHeight;\n\n            try {\n                let response;\n                \n                if (message.toLowerCase().includes('load') || message.toLowerCase().includes('van')) {\n                    response = await getLoadingAdvice();\n                } else if (message.toLowerCase().includes('remind') || message.toLowerCase().includes('note')) {\n                    response = await getReminders();\n                } else if (message.toLowerCase().includes('next') || message.toLowerCase().includes('stop')) {\n                    response = await getNextStopInfo();\n                } else if (message.toLowerCase().includes('scan') || message.toLowerCase().includes('parcel')) {\n                    response = await handleParcelScan(message);\n                } else {\n                    // Default generic response\n                    const routeInfo = getRouteInfoForAI();\n                    const prompt = `\n                        You are a delivery route assistant. The user asked: \"${message}\"\n                        \n                        Current Route Details:\n                        - Start Location: ${routeInfo.startLocation}\n                        - Number of Stops: ${routeInfo.stopCount}\n                        - Optimization Method: ${routeInfo.optimizationMethod}\n                        - Total Distance: ${routeInfo.totalDistance} km\n                        - Stops: ${routeInfo.stopsList}\n                        \n                        ${state.aiTrainingData ? `Additional Training Data: ${state.aiTrainingData}` : ''}\n                        \n                        Provide a helpful response to the user's question, considering the current route information.\n                        Be concise but informative, and use bullet points when appropriate.\n                    `;\n                    \n                    response = await callWebsimAI(prompt);\n                }\n\n                // Remove typing indicator\n                elements.aiChatBody.removeChild(typingIndicator);\n                \n                // Add AI response\n                addAiMessage(response || \"I couldn't generate a response. Please try again.\");\n            } catch (error) {\n                console.error('Error generating AI response:', error);\n                elements.aiChatBody.removeChild(typingIndicator);\n                addAiMessage(\"Sorry, I encountered an error. Please try again later.\");\n            }\n        }"
    },
    {
      "id": "function-open-ai-settings",
      "type": "js-function",
      "description": "Opens the modal dialog for AI assistant settings.",
      "code": "function openAiSettings() {\n            elements.aiSettingsModal.style.display = 'block';\n        }"
    },
    {
      "id": "function-close-ai-settings",
      "type": "js-function",
      "description": "Closes the modal dialog for AI assistant settings.",
      "code": "function closeAiSettings() {\n            elements.aiSettingsModal.style.display = 'none';\n        }"
    },
    {
      "id": "function-train-ai-with-data",
      "type": "js-function",
      "description": "Saves the provided training data to local storage for use in future AI prompts.",
      "code": "function trainAiWithData() {\n            const trainingData = elements.aiTrainingData.value.trim();\n            if (!trainingData) {\n                addAiMessage(\"Please enter some training data first.\");\n                return;\n            }\n\n            state.aiTrainingData = trainingData;\n            localStorage.setItem('aiTrainingData', trainingData);\n            addAiMessage(\"AI training data saved successfully. The assistant will use this data for future recommendations.\");\n            closeAiSettings();\n        }"
    },
    {
      "id": "function-call-websim-ai",
      "type": "js-function",
      "description": "A wrapper function to make an asynchronous call to the `websim.chat.completions.create` API with a given prompt.",
      "code": "async function callWebsimAI(prompt) {\n            try {\n                const completion = await websim.chat.completions.create({\n                    messages: [\n                        { role: \"assistant\", content: prompt }\n                    ]\n                });\n                return completion.content || \"No response from AI.\";\n            } catch (error) {\n                console.error('Error calling websim AI:', error);\n                const errorMessage = \"Sorry, I encountered an error. Please try again later. The built-in AI may be temporarily unavailable.\";\n                addAiMessage(errorMessage); // Also show error in chat\n                return errorMessage;\n            }\n        }"
    },
    {
      "id": "function-get-loading-advice",
      "type": "js-function",
      "description": "Generates a prompt for the AI to provide van loading advice based on the current calculated route.",
      "code": "async function getLoadingAdvice() {\n            if (!state.routeCalculated || state.deliveryStops.length === 0) {\n                return \"Please calculate a route with at least one stop first.\";\n            }\n\n            const routeInfo = getRouteInfoForAI();\n            const prompt = `\n                You are a delivery route optimization assistant. Help the driver load their van optimally based on the following route information:\n                \n                Route Details:\n                - Start Location: ${routeInfo.startLocation}\n                - Number of Stops: ${routeInfo.stopCount}\n                - Optimization Method: ${routeInfo.optimizationMethod}\n                - Total Distance: ${routeInfo.totalDistance} km\n                - Stops: ${routeInfo.stopsList}\n                \n                ${state.aiTrainingData ? `Additional Training Data: ${state.aiTrainingData}` : ''}\n                \n                Provide specific advice on how to load the van, indicating which parcels should go where based on the delivery order. \n                Consider that items for earlier stops should be more accessible. \n                Group items by area when possible (e.g., \"Easton items go together\").\n                Provide your response in clear, bullet-point format.\n            `;\n\n            return await callWebsimAI(prompt);\n        }"
    },
    {
      "id": "function-get-reminders",
      "type": "js-function",
      "description": "Generates a prompt for the AI to provide important reminders based on stop notes and route context.",
      "code": "async function getReminders() {\n            if (!state.routeCalculated || state.deliveryStops.length === 0) {\n                return \"Please calculate a route with at least one stop first.\";\n            }\n\n            const routeInfo = getRouteInfoForAI();\n            const currentStop = state.currentStopIndex < state.deliveryStops.length \n                ? state.deliveryStops[state.currentStopIndex] \n                : null;\n\n            const prompt = `\n                A delivery driver has stops to complete: \n                ${state.deliveryStops.map((stop, index) => `${index + 1}. ${stop.address}`).join('\\n')}\n                \n                Current Stop: ${currentStop ? `${state.currentStopIndex + 1}. ${currentStop.address}` : 'Not specified'}\n                Route Optimization Method: ${state.optimizationMethod}\n                Total Distance: ${calculateTotalDistance([state.startLocation, ...state.deliveryStops]).toFixed(1)} km\n                \n                Provide reminders about:\n                1. Any special instructions in the notes for current or upcoming stops\n                2. If the driver is about to leave an area (based on place names like Easton, Colliweston, etc.)\n                3. Any time-sensitive deliveries\n                4. Other important considerations\n                \n                Format your response as a clear list of reminders with emoji icons for important items.\n            `;\n\n            return await callWebsimAI(prompt);\n        }"
    },
    {
      "id": "function-get-next-stop-info",
      "type": "js-function",
      "description": "Generates a prompt for the AI to provide detailed information about the next stop on the route.",
      "code": "async function getNextStopInfo() {\n            if (!state.routeCalculated || state.deliveryStops.length === 0) {\n                return \"Please calculate a route with at least one stop first.\";\n            }\n\n            if (state.currentStopIndex >= state.deliveryStops.length) {\n                return \"You've completed all stops on this route!\";\n            }\n\n            const nextStop = state.deliveryStops[state.currentStopIndex];\n            const prompt = `\n                You are a delivery route assistant. Provide detailed information about the driver's next stop:\n                \n                Next Stop Details:\n                - Address: ${nextStop.address}\n                - Notes: ${nextStop.notes || 'None'}\n                - Position in Route: ${state.currentStopIndex + 1} of ${state.deliveryStops.length}\n                \n                ${state.aiTrainingData ? `Additional Training Data: ${state.aiTrainingData}` : ''}\n                \n                Provide:\n                1. A summary of the stop (location, any identifiable landmarks)\n                2. Any special instructions from the notes\n                3. Parking or access considerations\n                4. A friendly heads-up or tip for this delivery.\n                \n                Format your response in a clear, friendly manner with section headings.\n            `;\n\n            return await callWebsimAI(prompt);\n        }"
    },
    {
      "id": "function-handle-parcel-scan",
      "type": "js-function",
      "description": "Generates a prompt for the AI to provide placement advice for a scanned parcel based on the current route.",
      "code": "async function handleParcelScan(message = '') {\n            let parcelId = '';\n            if (typeof message === 'string' && message.toLowerCase().includes('scan')) {\n                 parcelId = message.replace(/scan/i, '').trim();\n            } else {\n                 parcelId = elements.parcelScanInput.value.trim();\n            }\n                \n            if (!parcelId) {\n                return \"Please scan or enter a parcel ID first.\";\n            }\n            \n            const prompt = `\n                A delivery driver has scanned a parcel with ID: ${parcelId}. \n                Based on the following route information, advise where in the van this parcel should be placed:\n                \n                Route Details:\n                - Start Location: ${state.startLocation.address}\n                - Number of Stops: ${state.deliveryStops.length}\n                - Optimization Method: ${state.optimizationMethod}\n                - Total Distance: ${calculateTotalDistance([state.startLocation, ...state.deliveryStops]).toFixed(1)} km\n                - Stops: ${state.deliveryStops.map(stop => stop.address).join('\\n')}\n                \n                ${state.aiTrainingData ? `Additional Training Data: ${state.aiTrainingData}` : ''}\n                \n                If you can't determine the exact stop for this parcel, suggest a general placement strategy based on typical delivery patterns for this route.\n                Format your response with clear bullet points and use van loading terminology (e.g., \"near the side door\", \"behind driver seat\").\n            `;\n\n            elements.parcelScanInput.value = '';\n            const response = await callWebsimAI(prompt);\n            addAiMessage(`**Parcel ID: ${parcelId}**\\n\\n${response}`);\n        }"
    },
    {
      "id": "function-get-route-info-for-ai",
      "type": "js-function",
      "description": "A helper function that compiles current route information into a structured object for AI prompts.",
      "code": "function getRouteInfoForAI() {\n            return {\n                startLocation: state.startLocation?.address || 'Not specified',\n                stopCount: state.deliveryStops.length,\n                optimizationMethod: state.optimizationMethod,\n                totalDistance: calculateTotalDistance([state.startLocation, ...state.deliveryStops]).toFixed(1),\n                stopsList: state.deliveryStops.map((stop, index) => \n                    `${index + 1}. ${stop.address}${stop.notes ? ` (Notes: ${stop.notes})` : ''}`\n                ).join('\\n')\n            };\n        }"
    },
    {
      "id": "function-open-note-modal",
      "type": "js-function",
      "description": "Opens the note editing modal for a specific stop or the start location.",
      "code": "function openNoteModal(index) {\n            state.currentNoteIndex = index;\n            const stop = index === 'start' ? state.startLocation : state.deliveryStops[index];\n            \n            elements.noteModalTitle.textContent = index === 'start' ? 'Start Location Notes' : `Stop ${index + 1} Notes`;\n            elements.noteModalText.value = stop.notes || '';\n            elements.noteModal.style.display = 'block';\n            elements.noteModalText.focus();\n        }"
    },
    {
      "id": "function-close-note-modal",
      "type": "js-function",
      "description": "Closes the note editing modal.",
      "code": "function closeNoteModal() {\n            elements.noteModal.style.display = 'none';\n            state.currentNoteIndex = null;\n        }"
    },
    {
      "id": "function-save-note",
      "type": "js-function",
      "description": "Saves the content of the note modal to the appropriate stop in the application state and updates the UI.",
      "code": "function saveNote() {\n            const notes = elements.noteModalText.value.trim();\n            \n            if (state.currentNoteIndex === 'start') {\n                if (state.startLocation) {\n                    state.startLocation.notes = notes;\n                }\n            } else if (state.currentNoteIndex !== null && state.deliveryStops[state.currentNoteIndex]) {\n                state.deliveryStops[state.currentNoteIndex].notes = notes;\n            }\n            \n            updateDeliveryStopsUI();\n            if (state.routeCalculated) {\n                updateRouteSummaryUI();\n            }\n            \n            saveState();\n            closeNoteModal();\n        }"
    },
    {
      "id": "function-request-location-permission",
      "type": "js-function",
      "description": "Initiates the browser's location permission prompt by calling the `getCurrentLocation` function.",
      "code": "function requestLocationPermission() {\n            elements.locationStatus.textContent = \"Requesting location permission...\";\n            elements.locationStatus.className = \"location-status location-loading\";\n\n            // This will trigger the browser's permission prompt\n            getCurrentLocation();\n        }"
    },
    {
      "id": "function-save-state",
      "type": "js-function",
      "description": "Saves the current application state (stops, location, options) to the browser's local storage.",
      "code": "function saveState() {\n            const stateToSave = {\n                startLocation: state.startLocation,\n                deliveryStops: state.deliveryStops,\n                optimizationMethod: state.optimizationMethod,\n                routeCalculated: state.routeCalculated,\n                currentStopIndex: state.currentStopIndex,\n                startStopOverride: state.startStopOverride,\n                endStopOverride: state.endStopOverride\n            };\n            localStorage.setItem('routePlannerState', JSON.stringify(stateToSave));\n        }"
    },
    {
      "id": "function-load-saved-state",
      "type": "js-function",
      "description": "Loads the application state from local storage on startup, restoring the previous session.",
      "code": "async function loadSavedState() {\n            const savedState = localStorage.getItem('routePlannerState');\n            if (savedState) {\n                try {\n                    const parsedState = JSON.parse(savedState);\n                    if (parsedState.startLocation) {\n                        state.startLocation = parsedState.startLocation;\n                        if (!state.startLocation.notes) state.startLocation.notes = '';\n                        elements.startLocationInput.value = state.startLocation.address;\n                        elements.locationStatus.textContent = \"Using saved start location\";\n                        elements.locationStatus.className = \"location-status location-success\";\n                    }\n                    if (parsedState.deliveryStops && parsedState.deliveryStops.length > 0) {\n                        state.deliveryStops = parsedState.deliveryStops;\n                        // Ensure all stops have notes property\n                        state.deliveryStops.forEach(stop => {\n                            if (!stop.notes) stop.notes = '';\n                        });\n                        updateDeliveryStopsUI();\n                    }\n                    if (parsedState.optimizationMethod) {\n                        state.optimizationMethod = parsedState.optimizationMethod;\n                    }\n                    if (parsedState.routeCalculated) {\n                        state.routeCalculated = parsedState.routeCalculated;\n                        if (state.routeCalculated && state.startLocation && state.deliveryStops.length > 0) {\n                             // Re-calculate to restore state and re-render UI correctly\n                            const stopsBackup = [...state.deliveryStops];\n                            calculateRoute(true);\n                            state.deliveryStops = stopsBackup; // Restore original loaded order before re-optimizing\n                        }\n                    }\n                    if (parsedState.currentStopIndex !== undefined) {\n                        state.currentStopIndex = parsedState.currentStopIndex;\n                    }\n                    if (parsedState.startStopOverride) {\n                        state.startStopOverride = parsedState.startStopOverride;\n                    }\n                    if (parsedState.endStopOverride) {\n                        state.endStopOverride = parsedState.endStopOverride;\n                    }\n                    // After loading everything, update all UIs to reflect the state\n                    updateAllUIs();\n                    updateStopConstraintDropdowns();\n                } catch (e) {\n                    console.error('Failed to load saved state:', e);\n                }\n            }\n            // Check if we should prompt for notification permissions\n            checkNotificationPermission();\n            updateViewLiveRouteButton();\n        }"
    },
    {
      "id": "function-search-postcode-for-results",
      "type": "js-function",
      "description": "Uses the Google Maps Geocoding API to search for addresses within a given UK postcode.",
      "code": "async function searchPostcodeForResults() {\n            const postcode = elements.postcodeSearchInput.value.trim();\n            if (!postcode) {\n                alert('Please enter a postcode.');\n                return;\n            }\n\n            if (!state.apiKey) {\n                alert('Please enter and save your Google Maps API key first.');\n                return;\n            }\n            \n            if (!geocoder) {\n                alert(\"Google Geocoding Service is not ready. Please wait a moment or check your API key.\");\n                return;\n            }\n\n            elements.searchPostcodeBtn.textContent = 'Searching...';\n            elements.searchPostcodeBtn.disabled = true;\n            elements.addressResults.innerHTML = '';\n            elements.addressResults.style.display = 'none';\n\n            const request = {\n                address: postcode,\n                componentRestrictions: {\n                    country: 'GB',\n                    postalCode: postcode\n                }\n            };\n\n            geocoder.geocode(request, (results, status) => {\n                elements.searchPostcodeBtn.textContent = 'Find Addresses';\n                elements.searchPostcodeBtn.disabled = false;\n\n                if (status === google.maps.GeocoderStatus.OK && results) {\n                    const resultsWithDetails = results.map(result => {\n                        if (result.geometry && result.geometry.location) {\n                            return {\n                                address: result.formatted_address,\n                                coordinates: [result.geometry.location.lat(), result.geometry.location.lng()]\n                            };\n                        }\n                        return null;\n                    }).filter(Boolean);\n                    \n                    // Filter out duplicate addresses to present a cleaner list\n                    const uniqueResults = resultsWithDetails.filter((item, index, self) => \n                        index === self.findIndex((t) => (\n                            t.address === item.address\n                        ))\n                    );\n\n                    displayPostcodeResults(uniqueResults);\n\n                } else if (status === google.maps.GeocoderStatus.ZERO_RESULTS) {\n                    displayPostcodeResults([]);\n                } else if (status === google.maps.GeocoderStatus.REQUEST_DENIED) {\n                    alert(`Google Maps API Error: Geocoding Request Denied. Please check if your API key is correct, has billing enabled, and has the Geocoding API enabled.`);\n                    updateApiKeyStatus(false);\n                } else {\n                    console.error('Google Geocoder Error:', status);\n                    alert(`An error occurred while searching for addresses: ${status}. Please check your API key and internet connection.`);\n                }\n            });\n        }"
    },
    {
      "id": "function-display-postcode-results",
      "type": "js-function",
      "description": "Renders the list of addresses found from a postcode search and handles their selection.",
      "code": "function displayPostcodeResults(results) {\n            elements.addressResults.innerHTML = '';\n            if (!results || results.length === 0) {\n                const noResultDiv = document.createElement('div');\n                noResultDiv.className = 'address-result-item';\n                noResultDiv.style.fontStyle = 'italic';\n                noResultDiv.style.color = '#888';\n                noResultDiv.textContent = 'No addresses found for this postcode.';\n                elements.addressResults.appendChild(noResultDiv);\n                elements.addressResults.style.display = 'block';\n                return;\n            }\n\n            results.forEach(result => {\n                 if (!result || !result.address || !result.coordinates) return;\n\n                const div = document.createElement('div');\n                div.className = 'address-result-item';\n                div.textContent = result.address;\n                div.addEventListener('click', () => {\n                    elements.deliveryLocationInput.value = result.address;\n                    state.selectedDeliveryLocation = result;\n                    elements.addStopBtn.disabled = false;\n                    elements.addressResults.style.display = 'none';\n                    elements.deliveryLocationInput.focus();\n                });\n                elements.addressResults.appendChild(div);\n            });\n\n            elements.addressResults.style.display = 'block';\n        }"
    },
    {
      "id": "function-add-delivery-stop",
      "type": "js-function",
      "description": "Adds a selected delivery location to the list of stops, using the user's potentially refined address text from the input field and validated coordinates. Duplicate checks are now based on coordinates to ensure unique locations are added.",
      "code": "function addDeliveryStop() {\n            if (!state.selectedDeliveryLocation) {\n                alert('Please select a valid delivery address from the suggestions or postcode search results first.');\n                return;\n            }\n\n            // Use the address from the input field for display, but coordinates from the selected location.\n            const newAddressText = elements.deliveryLocationInput.value.trim();\n            const newCoordinates = state.selectedDeliveryLocation.coordinates;\n\n            // Check for duplicates by comparing coordinates (more robust than address string)\n            if (state.deliveryStops.some(stop => \n                stop.coordinates[0] === newCoordinates[0] && \n                stop.coordinates[1] === newCoordinates[1])) {\n                \n                alert('This location is already in the list of stops.');\n                elements.deliveryLocationInput.value = '';\n                elements.stopNotesInput.value = ''; // Clear notes as well\n                state.selectedDeliveryLocation = null;\n                elements.addStopBtn.disabled = true;\n                elements.deliverySuggestions.style.display = 'none';\n                return;\n            }\n\n            state.deliveryStops.push({\n                address: newAddressText, // Use the user's potentially refined address text\n                coordinates: newCoordinates, // Use the validated coordinates\n                notes: elements.stopNotesInput.value.trim(),\n                completed: false\n            });\n\n            elements.deliveryLocationInput.value = '';\n            elements.stopNotesInput.value = '';\n            state.selectedDeliveryLocation = null;\n            elements.addStopBtn.disabled = true;\n            elements.deliverySuggestions.style.display = 'none';\n\n            updateDeliveryStopsUI();\n            updateStopConstraintDropdowns();\n            updateCalculateRouteButton();\n            saveState();\n        }"
    },
    {
      "id": "function-remove-delivery-stop",
      "type": "js-function",
      "description": "Removes a specific delivery stop from the list based on its index.",
      "code": "function removeDeliveryStop(index) {\n            state.deliveryStops.splice(index, 1);\n            updateCurrentStopIndex(); // Recalculate current stop\n            updateDeliveryStopsUI();\n            updateStopConstraintDropdowns();\n            updateCalculateRouteButton();\n            if (state.routeCalculated) {\n                clearRouteVisualization();\n                state.routeCalculated = false;\n                elements.calculateRouteBtn.textContent = 'Calculate Route';\n            }\n            updateViewLiveRouteButton();\n            saveState();\n        }"
    },
    {
      "id": "function-toggle-stop-completion",
      "type": "js-function",
      "description": "Toggles the 'completed' status of a delivery stop and updates the UI.",
      "code": "function toggleStopCompletion(index) {\n            state.deliveryStops[index].completed = !state.deliveryStops[index].completed;\n            updateCurrentStopIndex(); // Recalculate current stop\n            updateDeliveryStopsUI();\n            if (state.routeCalculated) {\n                updateRouteSummaryUI();\n                updateMapMarkers(); // Update markers to reflect completion and current status\n            }\n            saveState();\n        }"
    },
    {
      "id": "function-update-delivery-stops-ui",
      "type": "js-function",
      "description": "Renders the list of delivery stops in the 'Stops List' tab based on the current application state.",
      "code": "function updateDeliveryStopsUI() {\n            elements.stopList.innerHTML = '';\n            state.deliveryStops.forEach((stop, index) => {\n                const li = document.createElement('li');\n                li.className = `stop-item ${stop.completed ? 'completed' : ''} ${index === state.currentStopIndex ? 'current-stop' : ''}`;\n\n                const span = document.createElement('span');\n                span.innerHTML = `<b>${index + 1}.</b> ${stop.address}`;\n                span.title = stop.address;\n\n                const completeBtn = document.createElement('button');\n                completeBtn.textContent = stop.completed ? '✓' : '○';\n                completeBtn.title = stop.completed ? 'Mark as incomplete' : 'Mark as complete';\n                completeBtn.className = 'complete-btn';\n                completeBtn.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    toggleStopCompletion(index);\n                });\n\n                const noteBtn = document.createElement('button');\n                noteBtn.textContent = '📝';\n                noteBtn.title = 'Edit notes';\n                noteBtn.className = 'note-btn';\n                noteBtn.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    openNoteModal(index);\n                });\n\n                const removeBtn = document.createElement('button');\n                removeBtn.textContent = '×';\n                removeBtn.title = 'Remove stop';\n                removeBtn.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    removeDeliveryStop(index);\n                });\n\n                li.appendChild(completeBtn);\n                li.appendChild(noteBtn);\n                li.appendChild(span);\n                li.appendChild(removeBtn);\n                elements.stopList.appendChild(li);\n            });\n\n            elements.stopCount.textContent = state.deliveryStops.length;\n            updateMapMarkers();\n        }"
    },
    {
      "id": "function-optimize-route",
      "type": "js-function",
      "description": "Optimizes the order of delivery stops using various algorithms like nearest-neighbor, simple distance sort, or clustering.",
      "code": "function optimizeRoute(stops, method, startingPoint) {\n            // This function implements a nearest-neighbor heuristic for the Traveling Salesperson Problem.\n            // It provides a much more efficient route than simple sorting.\n            if (!startingPoint || stops.length < 2) {\n                if (stops.length === 1 && startingPoint) {\n                    return stops;\n                }\n                return stops;\n            }\n\n            // A new simple sort option for users who prefer it.\n            if (method === 'closest-to-start') {\n                 // Sorts stops based on their direct distance from the starting point.\n                return stops.sort((a, b) => {\n                    const distA = calculateDistance(startingPoint.coordinates, a.coordinates);\n                    const distB = calculateDistance(startingPoint.coordinates, b.coordinates);\n                    return distA - distB;\n                });\n            }\n\n            if (method === 'cluster') {\n                return optimizeByClustering(stops, startingPoint);\n            }\n            \n            // Default (time) and roundtrip: Nearest Neighbor algorithm\n            let unvisitedStops = [...stops];\n            let orderedStops = [];\n            let currentPoint = startingPoint;\n\n            while (unvisitedStops.length > 0) {\n                let nearestStopIndex = -1;\n                let minDistance = Infinity;\n\n                // Find the closest unvisited stop to the current point in the route\n                for (let i = 0; i < unvisitedStops.length; i++) {\n                    const distance = calculateDistance(currentPoint.coordinates, unvisitedStops[i].coordinates);\n                    \n                    if (distance < minDistance) {\n                        minDistance = distance;\n                        nearestStopIndex = i;\n                    }\n                }\n                \n                // Add the nearest stop to our ordered list and remove it from unvisited\n                const nearestStop = unvisitedStops.splice(nearestStopIndex, 1)[0];\n                orderedStops.push(nearestStop);\n                \n                // The new current point is the stop we just added\n                currentPoint = nearestStop;\n            }\n\n            // For 'fuel' option, apply 2-opt refinement for a better route\n            if (method === 'fuel') {\n                return twoOptRefinement(orderedStops, startingPoint);\n            }\n\n            return orderedStops;\n        }"
    },
    {
      "id": "function-two-opt-refinement",
      "type": "js-function",
      "description": "Applies the 2-opt heuristic to a given route to further refine it and find a shorter path, often used for fuel-saving optimization.",
      "code": "function twoOptRefinement(route, startingPoint) {\n            if (route.length < 2) return route;\n\n            let improved = true;\n            let tour = [startingPoint, ...route];\n            \n            while (improved) {\n                improved = false;\n                for (let i = 0; i < tour.length - 2; i++) {\n                    for (let j = i + 2; j < tour.length - 1; j++) {\n                        const p_i = tour[i];\n                        const p_i1 = tour[i + 1];\n                        const p_j = tour[j];\n                        const p_j1 = tour[j + 1];\n\n                        const original_dist = calculateDistance(p_i.coordinates, p_i1.coordinates) + calculateDistance(p_j.coordinates, p_j1.coordinates);\n                        const new_dist = calculateDistance(p_i.coordinates, p_j.coordinates) + calculateDistance(p_i1.coordinates, p_j1.coordinates);\n\n                        if (new_dist < original_dist) {\n                            // Reverse the segment from i+1 to j\n                            const segment = tour.slice(i + 1, j + 1);\n                            segment.reverse();\n                            tour = [...tour.slice(0, i + 1), ...segment, ...tour.slice(j + 1)];\n                            improved = true;\n                        }\n                    }\n                    if (improved) break; // Restart scan with the improved route\n                }\n            }\n\n            return tour.slice(1); // Return just the stops, without the starting point\n        }"
    },
    {
      "id": "function-optimize-by-clustering",
      "type": "js-function",
      "description": "A route optimization strategy that groups stops into local clusters, sorts the clusters, and then optimizes the path within each cluster.",
      "code": "function optimizeByClustering(stops, startingPoint) {\n            if (stops.length < 3) return stops; // Not enough points to cluster effectively\n            // Simplified K-Means clustering\n            // 1. Determine K (number of clusters)\n            const k = Math.min(Math.max(2, Math.floor(Math.sqrt(stops.length / 2))), 5); // Heuristic for K, capped at 5\n\n            // 2. Initialize centroids randomly from stops\n            let centroids = stops.slice(0, k).map(s => s.coordinates);\n            let clusters = Array.from({ length: k }, () => []);\n\n            for (let iter = 0; iter < 10; iter++) { // Iterate a few times to stabilize clusters\n                // 3. Assign stops to the closest centroid\n                clusters = Array.from({ length: k }, () => []);\n                stops.forEach(stop => {\n                    let minDistance = Infinity;\n                    let closestCentroidIndex = 0;\n                    centroids.forEach((centroid, index) => {\n                        const dist = calculateDistance(stop.coordinates, centroid);\n                        if (dist < minDistance) {\n                            minDistance = dist;\n                            closestCentroidIndex = index;\n                        }\n                    });\n                    clusters[closestCentroidIndex].push(stop);\n                });\n\n                // 4. Recalculate centroids\n                centroids = clusters.map(cluster => {\n                    if (cluster.length === 0) return [0, 0]; // Should not happen with good data\n                    const sum = cluster.reduce((acc, stop) => [acc[0] + stop.coordinates[0], acc[1] + stop.coordinates[1]], [0, 0]);\n                    return [sum[0] / cluster.length, sum[1] / cluster.length];\n                }).filter(c => c[0] !== 0); // Filter out empty clusters' centroids\n            }\n\n            // 5. Order clusters by distance from start\n            clusters.sort((a, b) => {\n                if (a.length === 0) return 1;\n                if (b.length === 0) return -1;\n                const centroidA = centroids[clusters.indexOf(a)];\n                const centroidB = centroids[clusters.indexOf(b)];\n                return calculateDistance(startingPoint.coordinates, centroidA) - calculateDistance(startingPoint.coordinates, centroidB);\n            });\n\n            // 6. For each cluster, find the optimal internal path (using Nearest Neighbor)\n            let finalRoute = [];\n            let lastPoint = startingPoint;\n\n            clusters.forEach(cluster => {\n                if (cluster.length > 0) {\n                    let unvisited = [...cluster];\n                    let orderedCluster = [];\n                    // Find the best entry point into the cluster from the last point of the previous cluster\n                    let bestEntryPointIndex = 0;\n                    let minEntryDistance = Infinity;\n                    unvisited.forEach((stop, index) => {\n                        const dist = calculateDistance(lastPoint.coordinates, stop.coordinates);\n                        if (dist < minEntryDistance) {\n                            minEntryDistance = dist;\n                            bestEntryPointIndex = index;\n                        }\n                    });\n                    let currentPoint = unvisited.splice(bestEntryPointIndex, 1)[0];\n                    orderedCluster.push(currentPoint);\n\n                    // Optimize within the cluster\n                    while (unvisited.length > 0) {\n                        let nearestStopIndex = -1;\n                        let minDistance = Infinity;\n                        for (let i = 0; i < unvisited.length; i++) {\n                            const distance = calculateDistance(currentPoint.coordinates, unvisited[i].coordinates);\n                            if (distance < minDistance) {\n                                minDistance = distance;\n                                nearestStopIndex = i;\n                            }\n                        }\n                        const nearestStop = unvisited.splice(nearestStopIndex, 1)[0];\n                        orderedCluster.push(nearestStop);\n                        currentPoint = nearestStop;\n                    }\n                    finalRoute.push(...orderedCluster);\n                    lastPoint = orderedCluster[orderedCluster.length - 1]; // Update last point for next cluster\n                }\n            });\n\n            return finalRoute;\n        }"
    },
    {
      "id": "function-calculate-distance",
      "type": "js-function",
      "description": "Calculates the great-circle distance between two geographic coordinates using the Haversine formula.",
      "code": "function calculateDistance(coord1, coord2) {\n            if (!coord1 || !coord2) return 0; // Guard against undefined coordinates\n            const R = 6371; // Radius of the Earth in km\n            const dLat = (coord2[0] - coord1[0]) * Math.PI / 180;\n            const dLon = (coord2[1] - coord1[1]) * Math.PI / 180;\n            const a = \n                Math.sin(dLat/2) * Math.sin(dLat/2) +\n                Math.cos(coord1[0] * Math.PI / 180) * Math.cos(coord2[0] * Math.PI / 180) * \n                Math.sin(dLon/2) * Math.sin(dLon/2);\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n            return R * c;\n        }"
    },
    {
      "id": "function-calculate-route",
      "type": "js-function",
      "description": "The main function for route calculation; it orchestrates getting the current location, optimizing stops, and updating the UI and map.",
      "code": "async function calculateRoute(isReload = false) {\n            updateCalculateRouteButton();\n\n            if (elements.calculateRouteBtn.disabled && !isReload) {\n                alert(\"Cannot calculate route. Please add at least one stop.\");\n                return;\n            }\n\n            elements.calculateRouteBtn.textContent = 'Getting location...';\n            elements.calculateRouteBtn.disabled = true;\n\n            try {\n                const currentLocation = await getUpdatedCurrentLocation();\n                state.startLocation = currentLocation;\n                elements.startLocationInput.value = currentLocation.address;\n                elements.locationStatus.textContent = \"Using your current location for calculation\";\n                elements.locationStatus.className = \"location-status location-success\";\n            } catch (error) {\n                alert(`Could not get current location: ${error}. Please ensure location services are enabled.`);\n                elements.calculateRouteBtn.textContent = 'Calculate Route';\n                updateCalculateRouteButton();\n                return;\n            }\n\n            elements.calculateRouteBtn.textContent = 'Calculating...';\n\n            // Separate completed stops from incomplete ones\n            const completedStops = state.deliveryStops.filter(stop => stop.completed);\n            let incompleteStops = state.deliveryStops.filter(stop => !stop.completed);\n\n            if (incompleteStops.length === 0) {\n                alert(\"All stops are marked as complete. There's no new route to calculate.\");\n                clearRouteVisualization();\n                state.routeCalculated = false;\n                elements.calculateRouteBtn.textContent = 'Calculate Route';\n                updateCalculateRouteButton();\n                return;\n            }\n\n            // --- NEW LOGIC FOR START/END STOPS ---\n            let startStopForRoute = null;\n\n            // If a start stop is selected, use it as the start location\n            if (state.startStopOverride) {\n                const startIdx = state.deliveryStops.findIndex(s => s.address === state.startStopOverride);\n                if (startIdx > -1) {\n                    startStopForRoute = state.deliveryStops[startIdx];\n                    state.startLocation = startStopForRoute;\n                    elements.startLocationInput.value = state.startLocation.address;\n                    elements.locationStatus.textContent = `Starting route from: ${state.startLocation.address.split(',')[0]}`;\n                    elements.locationStatus.className = \"location-status location-success\";\n                }\n            }\n\n            // Only get current location if no start stop override is selected or found\n            if (!startStopForRoute) {\n                try {\n                    const currentLocation = await getUpdatedCurrentLocation();\n                    state.startLocation = currentLocation;\n                    elements.startLocationInput.value = currentLocation.address;\n                    elements.locationStatus.textContent = \"Using your current location for calculation\";\n                    elements.locationStatus.className = \"location-status location-success\";\n                } catch (error) {\n                    alert(`Could not get current location: ${error}. Please ensure location services are enabled.`);\n                    elements.calculateRouteBtn.textContent = 'Calculate Route';\n                    updateCalculateRouteButton();\n                    return;\n                }\n            }\n\n            elements.calculateRouteBtn.textContent = 'Calculating...';\n\n            // Handle start/end constraints\n            let endStop = null;\n            let stopsToOptimize = [...incompleteStops];\n\n            if (state.endStopOverride) {\n                const endIdx = stopsToOptimize.findIndex(s => s.address === state.endStopOverride);\n                if (endIdx > -1) {\n                    // It also shouldn't be the same as the start stop if one was chosen\n                    if (!startStopForRoute || (startStopForRoute.address !== state.endStopOverride)) {\n                        endStop = stopsToOptimize.splice(endIdx, 1)[0];\n                    }\n                }\n            }\n            \n            const optimizationStartPoint = state.startLocation; // Always use state.startLocation as it's been set correctly\n            \n            // Optimize the route using the remaining incomplete stops.\n            const reorderedIntermediateStops = optimizeRoute(stopsToOptimize, state.optimizationMethod, optimizationStartPoint);\n            \n            let reorderedIncompleteStops = [];\n            reorderedIncompleteStops.push(...reorderedIntermediateStops);\n            if (endStop) {\n                reorderedIncompleteStops.push(endStop);\n            }\n\n            // Update state.deliveryStops with the new optimized order, keeping completed stops at the end.\n            state.deliveryStops = [...reorderedIncompleteStops, ...completedStops];\n            \n            // Update the sidebar list to reflect the new order\n            updateDeliveryStopsUI();\n\n            // Prepare points for route summary and polyline.\n            let routePointsForDisplay = [state.startLocation, ...reorderedIncompleteStops];\n            \n            // For round trip, add the start location at the end for display purposes\n            if (state.optimizationMethod === 'roundtrip' && state.startLocation) {\n                routePointsForDisplay.push({\n                    ...state.startLocation,\n                    address: `Return to: ${state.startLocation.address}`,\n                    isReturn: true\n                });\n            }\n\n            const totalDistance = calculateTotalDistance(routePointsForDisplay);\n            \n            let detailsText = `Optimized route (${state.optimizationMethod}) with ${reorderedIncompleteStops.length} stop${reorderedIncompleteStops.length === 1 ? '' : 's'}. `;\n            detailsText += `Total approx distance: ${totalDistance.toFixed(1)} km.`;\n            \n            if (state.optimizationMethod === 'roundtrip') {\n                detailsText += \" (Round trip back to start)\";\n            }\n            \n            elements.routeDetails.textContent = detailsText;\n\n            updateRouteSummaryUI(routePointsForDisplay); // Pass the full set of points for summary\n            drawRouteLines(routePointsForDisplay);       // Pass the full set of points for polyline\n            updateMapMarkers(); // Update map markers, which will use the reordered state.deliveryStops\n\n            state.routeCalculated = true;\n            state.currentStopIndex = 0; // Reset to first stop when calculating new route\n            updateCurrentStopIndex(); // Set to first incomplete stop\n            saveState();\n            \n            if (!isReload) {\n                addAiMessage(\"Route calculated! Ask me for loading advice or reminders.\");\n            }\n            elements.calculateRouteBtn.textContent = 'Calculate Route';\n            updateCalculateRouteButton();\n            updateViewLiveRouteButton();\n        }"
    },
    {
      "id": "function-update-route-summary-ui",
      "type": "js-function",
      "description": "Renders the ordered list of stops in the 'Live Route' tab, including navigation and completion buttons.",
      "code": "function updateRouteSummaryUI(routePoints) {\n            if (!routePoints) { // If called without specific points (e.g., on completion toggle)\n                routePoints = [state.startLocation, ...state.deliveryStops];\n                if (state.optimizationMethod === 'roundtrip' && state.startLocation) {\n                    routePoints.push({\n                        ...state.startLocation,\n                        address: `Return to: ${state.startLocation.address}`,\n                        isReturn: true\n                    });\n                }\n            }\n\n            elements.routeSequence.innerHTML = '';\n            \n            let stopCounter = 0;\n            routePoints.forEach((point, index) => {\n                if (!point || !point.address || !Array.isArray(point.coordinates) || point.coordinates.length !== 2) return;\n\n                const li = document.createElement('li');\n                \n                // Find the original stop object from state.deliveryStops to get its current properties\n                // This is crucial because `routePoints` can be a temporary, reordered list\n                const originalStopIndexInState = state.deliveryStops.findIndex(s => s.address === point.address);\n                const isDeliveryStop = !point.isReturn && index > 0;\n                const actualPointReference = isDeliveryStop && originalStopIndexInState > -1 \n                    ? state.deliveryStops[originalStopIndexInState]\n                    : state.startLocation;\n\n                if (actualPointReference && actualPointReference.completed) {\n                    li.className = 'completed';\n                }\n\n                // Highlight if it's the current stop\n                if (isDeliveryStop && originalStopIndexInState === state.currentStopIndex) {\n                    li.classList.add('current-stop');\n                }\n                    \n                const textSpan = document.createElement('span');\n                let label;\n                if (index === 0) {\n                    label = \"Start\";\n                } else if (point.isReturn) {\n                    label = \"Return\";\n                } else {\n                    stopCounter++;\n                    label = `Stop ${stopCounter}`;\n                }\n                \n                textSpan.innerHTML = `<b>${label}:</b> ${point.address}${actualPointReference.notes ? `<br><small style=\"color:#666;\">Note: ${actualPointReference.notes}</small>` : ''}`;\n                textSpan.title = point.address;\n                li.appendChild(textSpan);\n\n                const buttonContainer = document.createElement('div');\n                buttonContainer.style.display = 'flex';\n                buttonContainer.style.gap = '5px';\n\n                // Complete button\n                const completeButton = document.createElement('button');\n                completeButton.textContent = (actualPointReference && actualPointReference.completed) ? '✓' : '○';\n                completeButton.title = (actualPointReference && actualPointReference.completed) ? 'Mark as incomplete' : 'Mark as complete';\n                completeButton.className = 'complete-btn';\n                completeButton.addEventListener('click', () => {\n                     if (isDeliveryStop && originalStopIndexInState !== -1) {\n                        toggleStopCompletion(originalStopIndexInState);\n                    } else if (index === 0) { // It's the start location\n                         state.startLocation.completed = !state.startLocation.completed;\n                         updateCurrentStopIndex();\n                         updateAllUIs();\n                         saveState();\n                    }\n                });\n                buttonContainer.appendChild(completeButton);\n\n                // Note button\n                const noteButton = document.createElement('button');\n                noteButton.textContent = '📝';\n                noteButton.classList.add('note-btn');\n                noteButton.title = 'Edit notes';\n                noteButton.addEventListener('click', () => {\n                    if (isDeliveryStop && originalStopIndexInState !== -1) {\n                        openNoteModal(originalStopIndexInState);\n                    } else { // Start or Return point\n                        openNoteModal('start');\n                    }\n                });\n                buttonContainer.appendChild(noteButton);\n\n                // Navigation button\n                const [lat, lng] = point.coordinates;\n                if (typeof lat === 'number' && !isNaN(lat) && typeof lng === 'number' && !isNaN(lng)) {\n                    const googleMapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`;\n\n                    const navButton = document.createElement('button');\n                    navButton.textContent = 'Navigate';\n                    navButton.classList.add('navigate-btn');\n                    navButton.title = `Open navigation to ${label} in Google Maps`;\n                    navButton.addEventListener('click', async () => {\n                        // Check if it's a delivery stop (not start or return)\n                        if (isDeliveryStop && originalStopIndexInState !== -1) {\n                            // 1. Update current stop index\n                            state.currentStopIndex = originalStopIndexInState;\n                            \n                            // 2. Update all UIs to reflect the new current stop\n                            updateAllUIs();\n                            \n                            // 3. Save the state\n                            saveState();\n\n                            // 4. Show native notification for the new current stop\n                            await showCurrentStopNotification(actualPointReference);\n                        }\n                        \n                        // 5. Open Google Maps for navigation\n                        window.open(googleMapsUrl, '_blank');\n                    });\n                    buttonContainer.appendChild(navButton);\n                } else {\n                    const noNavSpan = document.createElement('span');\n                    noNavSpan.style.fontSize = '0.8em';\n                    noNavSpan.style.fontStyle = 'italic';\n                    noNavSpan.style.marginLeft = '10px';\n                    noNavSpan.textContent = '(Nav not available)';\n                    buttonContainer.appendChild(noNavSpan);\n                }\n\n                li.appendChild(buttonContainer);\n                elements.routeSequence.appendChild(li);\n            });\n\n            elements.routeSummary.style.display = 'block';\n            handleLiveRouteSearch(); // Apply search filter after updating the list\n        }"
    },
    {
      "id": "function-calculate-total-distance",
      "type": "js-function",
      "description": "Calculates the total distance of a route by summing the distances between consecutive points.",
      "code": "function calculateTotalDistance(points) {\n            if (!points || points.length < 2) return 0;\n            \n            let totalDistance = 0;\n            for (let i = 0; i < points.length - 1; i++) {\n                if (points[i] && points[i+1] && points[i].coordinates && points[i+1].coordinates) {\n                    totalDistance += calculateDistance(points[i].coordinates, points[i+1].coordinates);\n                }\n            }\n            return totalDistance;\n        }"
    },
    {
      "id": "function-clear-route-visualization",
      "type": "js-function",
      "description": "Removes all route-related elements from the UI, such as route lines on the map and the route summary.",
      "code": "function clearRouteVisualization() {\n            routeLines.forEach(line => {\n                if (map.hasLayer(line)) {\n                     map.removeLayer(line);\n                }\n            });\n            routeLines = [];\n            elements.routeSummary.style.display = 'none';\n            elements.routeSequence.innerHTML = '';\n            elements.routeDetails.textContent = '';\n        }"
    },
    {
      "id": "function-update-map-markers",
      "type": "js-function",
      "description": "Clears and redraws all markers on the map for the start location and all delivery stops, reflecting their current status.",
      "code": "function updateMapMarkers() {\n            markers.forEach(marker => {\n                if (map.hasLayer(marker)) {\n                    map.removeLayer(marker);\n                }\n            });\n            markers = [];\n            let allPoints = [];\n\n            // Start location marker\n            if (state.startLocation && state.startLocation.coordinates) {\n                const startIconHtml = `<div class=\"numbered-marker start-marker ${state.startLocation.completed ? 'completed-marker' : ''}\">S</div>`;\n                const startDivIcon = L.divIcon({\n                    html: startIconHtml,\n                    className: '', // Classes are in the HTML string\n                    iconSize: [28, 28],\n                    iconAnchor: [14, 28] // Anchor at bottom-center\n                });\n                const startMarker = L.marker(state.startLocation.coordinates, { icon: startDivIcon })\n                    .addTo(map)\n                    .bindPopup(`<b>Start Location</b><br>${state.startLocation.address}${state.startLocation.notes ? `<br><br>Notes: ${state.startLocation.notes}` : ''}`);\n                markers.push(startMarker);\n                allPoints.push(state.startLocation.coordinates);\n            }\n\n            // Delivery stop markers\n            state.deliveryStops.forEach((stop, index) => {\n                if (!stop.coordinates) return;\n\n                let markerClasses = \"numbered-marker\";\n                if (stop.completed) markerClasses += \" completed-marker\";\n                if (index === state.currentStopIndex) markerClasses += \" current-marker\";\n\n                let iconHtml = `<div class=\"${markerClasses}\">${index + 1}</div>`;\n                const stopDivIcon = L.divIcon({\n                    html: iconHtml,\n                    className: '', // Classes are in the HTML string\n                    iconSize: [28, 28],\n                    iconAnchor: [14, 28] // Anchor at bottom-center\n                });\n\n                const stopMarker = L.marker(stop.coordinates, { icon: stopDivIcon })\n                    .addTo(map)\n                    .bindPopup(`<b>Stop ${index + 1}</b><br>${stop.address}${stop.notes ? `<br><br>Notes: ${stop.notes}` : ''}`);\n                markers.push(stopMarker);\n                allPoints.push(stop.coordinates);\n            });\n\n            if (allPoints.length > 0) {\n                try {\n                    const bounds = L.latLngBounds(allPoints);\n                    // Only fit bounds if not a calculated route or if only one point,\n                    // otherwise drawRouteLines will handle fitting.\n                    if (!state.routeCalculated || allPoints.length <= 1) {\n                        map.fitBounds(bounds, { padding: [50, 50] });\n                    }\n                } catch(e) {\n                    if (allPoints.length === 1) map.setView(allPoints[0], 15);\n                }\n            } else {\n                map.setView([54.5, -4], 6); // Default view if no points\n            }\n        }"
    },
    {
      "id": "function-draw-route-lines",
      "type": "js-function",
      "description": "Draws a polyline on the map connecting all the points of a calculated route and fits the map view to the route's bounds.",
      "code": "function drawRouteLines(points) {\n            routeLines.forEach(line => {\n                if (map.hasLayer(line)) {\n                     map.removeLayer(line);\n                }\n            });\n            routeLines = [];\n\n            const coords = points\n                .filter(p => p && p.coordinates)\n                .map(p => p.coordinates)\n                .filter(c => Array.isArray(c) && c.length === 2 && !isNaN(c[0]) && !isNaN(c[1]));\n\n            if (coords.length < 2) return;\n\n            try {\n                const routePolyline = L.polyline(coords, {\n                    color: '#2196F3',\n                    weight: 4,\n                    opacity: 0.8,\n                }).addTo(map);\n                routeLines.push(routePolyline);\n                map.fitBounds(routePolyline.getBounds(), { padding: [60, 60] });\n            } catch (e) {\n                console.error(\"Error drawing polyline:\", e, coords);\n                alert(\"An error occurred while drawing the route on the map.\");\n                elements.routeSummary.style.display = 'none';\n                state.routeCalculated = false;\n            }\n        }"
    },
    {
      "id": "function-switch-tab",
      "type": "js-function",
      "description": "Handles the logic for switching between different content tabs in the main sidebar area.",
      "code": "function switchTab(tabId) {\n            elements.tabPanes.forEach(pane => {\n                pane.classList.remove('active');\n            });\n            elements.menuItems.forEach(item => {\n                if(item.dataset.tab === tabId) {\n                    item.classList.add('active');\n                } else {\n                    item.classList.remove('active');\n                }\n            });\n\n            document.getElementById(tabId).classList.add('active');\n            \n            // If switching to AI tab, remove notification\n            if (tabId === 'ai-tab') {\n                state.hasNewAiNotification = false;\n                updateAiNotificationBadge();\n                setTimeout(() => {\n                    elements.aiChatBody.scrollTop = elements.aiChatBody.scrollHeight;\n                }, 100);\n            }\n        }"
    },
    {
      "id": "function-update-current-stop-index",
      "type": "js-function",
      "description": "A utility function to find and set the index of the first incomplete stop as the current stop.",
      "code": "function updateCurrentStopIndex() {\n            const firstIncompleteIndex = state.deliveryStops.findIndex(stop => !stop.completed);\n            state.currentStopIndex = firstIncompleteIndex !== -1 ? firstIncompleteIndex : state.deliveryStops.length;\n        }"
    },
    {
      "id": "function-update-all-uis",
      "type": "js-function",
      "description": "A helper function that calls multiple UI update functions to ensure the entire interface is synchronized with the state.",
      "code": "function updateAllUIs() {\n            updateDeliveryStopsUI();\n            updateMapMarkers();\n            if(state.routeCalculated) {\n                // When re-rendering summary, ensure current stop is highlighted correctly\n                updateRouteSummaryUI();\n            }\n        }"
    },
    {
      "id": "function-update-view-live-route-button",
      "type": "js-function",
      "description": "Enables or disables the 'View Live Route' button based on whether a route has been calculated.",
      "code": "function updateViewLiveRouteButton() {\n            if (elements.viewLiveRouteBtn) {\n                elements.viewLiveRouteBtn.disabled = !state.routeCalculated;\n            }\n        }"
    },
    {
      "id": "function-update-calculate-route-button",
      "type": "js-function",
      "description": "Enables or disables the 'Calculate Route' button based on whether any delivery stops have been added.",
      "code": "function updateCalculateRouteButton() {\n            const stopsExist = state.deliveryStops.length > 0;\n            elements.calculateRouteBtn.disabled = !stopsExist;\n            elements.recalculateRouteLiveBtn.disabled = !stopsExist;\n        }"
    },
    {
      "id": "function-clear-all",
      "type": "js-function",
      "description": "Resets the entire application state and UI to its initial, empty state.",
      "code": "function clearAll() {\n            state.startLocation = null;\n            state.deliveryStops = [];\n            state.selectedDeliveryLocation = null;\n            state.routeCalculated = false;\n            state.optimizationMethod = 'distance';\n            state.mapVisible = false;\n            state.currentStopIndex = 0;\n            state.startStopOverride = null;\n            state.endStopOverride = null;\n            elements.optimizeDistance.checked = true;\n\n            elements.startLocationInput.value = '';\n            elements.deliveryLocationInput.value = '';\n            elements.stopNotesInput.value = '';\n            elements.postcodeSearchInput.value = '';\n            elements.stopList.innerHTML = '';\n            elements.stopCount.textContent = '0';\n            elements.addressResults.style.display = 'none';\n            elements.startSuggestions.style.display = 'none';\n            elements.deliverySuggestions.style.display = 'none';\n            elements.toggleMapBtn.textContent = 'Show Map';\n            elements.toggleMapBtn.classList.remove('visible');\n            elements.mapContainer.classList.remove('visible');\n            elements.locationStatus.textContent = \"Location not set\";\n            elements.locationStatus.className = \"location-status\";\n            elements.requestLocationBtn.style.display = 'inline-block';\n\n            elements.addStopBtn.disabled = true;\n\n            clearRouteVisualization();\n            markers.forEach(marker => {\n                if (map.hasLayer(marker)) {\n                     map.removeLayer(marker);\n                }\n            });\n            markers = [];\n            updateCurrentStopIndex();\n            updateMapMarkers(); // Clear markers from map view\n\n            map.setView([54.5, -4], 6);\n            updateCalculateRouteButton();\n            updateViewLiveRouteButton();\n            \n            // Notify AI assistant\n            addAiMessage(\"All data cleared. Ready to plan a new route!\");\n        }"
    },
    {
      "id": "function-handle-live-route-search",
      "type": "js-function",
      "description": "Filters the visible stops in the live route summary based on a search query.",
      "code": "function handleLiveRouteSearch() {\n            const query = elements.searchLiveRouteInput.value.toLowerCase().trim();\n            const items = elements.routeSequence.querySelectorAll('li');\n\n            items.forEach(item => {\n                const text = item.textContent.toLowerCase();\n                if (text.includes(query)) {\n                    item.style.display = 'flex';\n                } else {\n                    item.style.display = 'none';\n                }\n            });\n        }"
    },
    {
      "id": "function-update-stop-constraint-dropdowns",
      "type": "js-function",
      "description": "Populates the start and end stop constraint dropdown menus with the current list of delivery stops.",
      "code": "function updateStopConstraintDropdowns() {\n            const stops = state.deliveryStops;\n            const startSelect = elements.startStopSelect;\n            const endSelect = elements.endStopSelect;\n\n            const currentStartVal = startSelect.value;\n            const currentEndVal = endSelect.value;\n\n            startSelect.innerHTML = '<option value=\"\">Automatic</option>';\n            endSelect.innerHTML = '<option value=\"\">Automatic</option>';\n\n            stops.forEach(stop => {\n                const optionStart = document.createElement('option');\n                optionStart.value = stop.address;\n                optionStart.textContent = stop.address;\n                startSelect.appendChild(optionStart);\n\n                const optionEnd = document.createElement('option');\n                optionEnd.value = stop.address;\n                optionEnd.textContent = stop.address;\n                endSelect.appendChild(optionEnd);\n            });\n\n            startSelect.value = currentStartVal;\n            endSelect.value = currentEndVal;\n        }"
    },
    {
      "id": "function-start-postcode-scanner",
      "type": "js-function",
      "description": "Initializes and displays the postcode scanner modal, requesting camera access and starting the video stream.",
      "code": "async function startPostcodeScanner() {\n            if (state.isScanning) return;\n            state.isScanning = true;\n\n            elements.postcodeScannerModal.style.display = 'flex';\n            elements.scannerStatus.textContent = 'Starting camera...';\n            elements.scannerResultContainer.style.display = 'none';\n            elements.scannerVideo.style.display = 'block';\n\n            try {\n                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n                    throw new Error(\"Camera access is not supported by your browser.\");\n                }\n                state.videoStream = await navigator.mediaDevices.getUserMedia({ \n                    video: { \n                        facingMode: 'environment',\n                        width: { ideal: 1280 },\n                        height: { ideal: 720 }\n                    } \n                });\n                elements.scannerVideo.srcObject = state.videoStream;\n                await elements.scannerVideo.play();\n                elements.scannerStatus.textContent = 'Scanning...';\n                startScanInterval();\n            } catch (err) {\n                console.error(\"Error accessing camera: \", err);\n                elements.scannerStatus.textContent = `Error: ${err.message}. Please check permissions.`;\n                state.isScanning = false;\n            }\n        }"
    },
    {
      "id": "function-stop-postcode-scanner",
      "type": "js-function",
      "description": "Stops the postcode scanning process, releases the camera stream, and hides the scanner modal.",
      "code": "function stopPostcodeScanner() {\n            if (state.scanIntervalId) {\n                clearInterval(state.scanIntervalId);\n                state.scanIntervalId = null;\n            }\n            if (state.videoStream) {\n                state.videoStream.getTracks().forEach(track => track.stop());\n                state.videoStream = null;\n            }\n            elements.scannerVideo.srcObject = null;\n            elements.postcodeScannerModal.style.display = 'none';\n            state.isScanning = false;\n        }"
    },
    {
      "id": "function-start-scan-interval",
      "type": "js-function",
      "description": "Starts an interval timer to periodically call the `scanFrameForPostcode` function.",
      "code": "function startScanInterval() {\n            if (state.scanIntervalId) {\n                clearInterval(state.scanIntervalId);\n            }\n            state.scanIntervalId = setInterval(scanFrameForPostcode, 2000); // Scan every 2 seconds\n        }"
    },
    {
      "id": "function-scan-frame-for-postcode",
      "type": "js-function",
      "description": "Captures a frame from the video stream, sends it to an AI service for analysis, and handles the extracted postcode result.",
      "code": "async function scanFrameForPostcode() {\n            if (!state.isScanning || elements.scannerVideo.readyState < 2) {\n                return;\n            }\n\n            const canvas = elements.scannerCanvas;\n            const video = elements.scannerVideo;\n            const context = canvas.getContext('2d');\n\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n            context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n            const imageDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n\n            try {\n                const completion = await websim.chat.completions.create({\n                    messages: [{\n                        role: 'user',\n                        content: [{\n                                type: 'text',\n                                text: `Analyze this image and extract any valid full UK postcode (e.g., SW1A 0AA, M1 1AE, G1 1RD, BT1 5GS). A full UK postcode has an outward code and an inward code separated by a space. The outward code is 2-4 characters long, and the inward code is always 3 characters long. Respond directly with JSON, following this JSON schema, and no other text. If no valid postcode is found, return an empty string for \"postcode\".\\n\\n{ \"postcode\": \"string\" }`,\n                            },\n                            {\n                                type: 'image_url',\n                                image_url: { url: imageDataUrl },\n                            },\n                        ],\n                    }, ],\n                    json: true,\n                });\n\n                const result = JSON.parse(completion.content);\n\n                if (result.postcode) {\n                    clearInterval(state.scanIntervalId); // Stop scanning\n                    elements.scannedPostcodeResult.textContent = result.postcode;\n                    elements.scannerResultContainer.style.display = 'block';\n                    elements.scannerStatus.textContent = 'Postcode Found!';\n                } else {\n                    elements.scannerStatus.textContent = 'Scanning... No postcode detected yet.';\n                }\n            } catch (error) {\n                console.error('Error during postcode scan:', error);\n                elements.scannerStatus.textContent = 'Error during scan. Retrying...';\n            }\n        }"
    },
    {
      "id": "function-load-google-maps-sdk",
      "type": "js-function",
      "description": "Dynamically loads the Google Maps JavaScript SDK script tag into the document.",
      "code": "function loadGoogleMapsSDK() {\n            if (window.google && window.google.maps) {\n                console.log(\"Google Maps SDK already loaded.\");\n                initializeGoogleServices();\n                return;\n            }\n            if (document.getElementById('google-maps-sdk').src) {\n                console.log(\"Google Maps SDK is already loading.\");\n                return;\n            }\n\n            const script = document.getElementById('google-maps-sdk');\n            script.src = `https://maps.googleapis.com/maps/api/js?key=${state.apiKey}&libraries=places&callback=initializeGoogleServices`;\n        }"
    },
    {
      "id": "function-initialize-google-services",
      "type": "js-function",
      "description": "A callback function that initializes the Google Maps services (Autocomplete, Places, Geocoder) after the SDK has loaded.",
      "code": "function initializeGoogleServices() {\n            if (window.google && window.google.maps && window.google.maps.places) {\n                autocompleteService = new google.maps.places.AutocompleteService();\n                // We need a map instance to initialize PlacesService, but we can use a dummy div.\n                const dummyDiv = document.createElement('div');\n                placesService = new google.maps.places.PlacesService(dummyDiv);\n                geocoder = new google.maps.Geocoder();\n                console.log(\"Google Maps services initialized.\");\n            } else {\n                console.error(\"Google Maps SDK failed to load correctly.\");\n                alert(\"Could not initialize Google Maps services. Address search may not work.\");\n            }\n        }"
    },
    {
      "id": "function-update-api-key-status",
      "type": "js-function",
      "description": "Updates the visual status indicator for the Google Maps API key to show whether it is 'Saved' or 'Not set'.",
      "code": "function updateApiKeyStatus(isSet) {\n            if (isSet) {\n                elements.apiKeyStatus.textContent = 'Saved';\n                elements.apiKeyStatus.classList.remove('not-set');\n                elements.apiKeyStatus.classList.add('saved');\n            } else {\n                elements.apiKeyStatus.textContent = 'Not set';\n                elements.apiKeyStatus.classList.remove('saved');\n                elements.apiKeyStatus.classList.add('not-set');\n            }\n        }"
    },
    {
      "id": "function-save-api-key",
      "type": "js-function",
      "description": "Saves the entered Google Maps API key to the application state and local storage.",
      "code": "function saveApiKey() {\n            const newApiKey = elements.apiKeyInput.value.trim();\n            if (newApiKey) {\n                state.apiKey = newApiKey;\n                localStorage.setItem('googleMapsApiKey', newApiKey);\n                updateApiKeyStatus(true);\n                alert('API Key saved successfully!');\n                if (!window.google || !window.google.maps) {\n                    loadGoogleMapsSDK();\n                } else {\n                    // If SDK is loaded, re-initialize services with the new key.\n                    initializeGoogleServices();\n                }\n            } else {\n                alert('Please enter an API key.');\n            }\n        }"
    }
  ]
}